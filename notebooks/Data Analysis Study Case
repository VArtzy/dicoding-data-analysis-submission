{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP09qfkF/ztifniX5FE0uR0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"n6jsV3RZPutQ","executionInfo":{"status":"ok","timestamp":1734955897375,"user_tz":-420,"elapsed":1548,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns"]},{"cell_type":"code","source":["customers_df = pd.read_csv(\"https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/customers.csv\")\n","customers_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":293},"id":"Jxmjcq2LQAgp","executionInfo":{"status":"ok","timestamp":1734955898914,"user_tz":-420,"elapsed":175,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"5e756edf-b705-4a1f-a2e8-185a6686d946"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   customer_id customer_name             gender  age  \\\n","0            1       fulan 1             Female   30   \n","1            2       fulan 2  Prefer not to say   69   \n","2            3       fulan 3  Prefer not to say   59   \n","3            4       fulan 4  Prefer not to say   67   \n","4            5       fulan 5  Prefer not to say   30   \n","\n","                     home_address  zip_code               city  \\\n","0  8606 Victoria TerraceSuite 560      5464      Johnstonhaven   \n","1      8327 Kirlin SummitApt. 461      8223    New Zacharyfort   \n","2       269 Gemma SummitSuite 109      5661           Aliburgh   \n","3       743 Bailey GroveSuite 141      1729  South Justinhaven   \n","4         48 Hyatt ManorSuite 375      4032     Griffithsshire   \n","\n","                          state    country  \n","0            Northern Territory  Australia  \n","1               South Australia  Australia  \n","2  Australian Capital Territory  Australia  \n","3                    Queensland  Australia  \n","4                    Queensland  Australia  "],"text/html":["\n","  <div id=\"df-4aab08eb-adbf-4ed4-bde2-e84d42df6760\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>customer_id</th>\n","      <th>customer_name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>home_address</th>\n","      <th>zip_code</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>country</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>fulan 1</td>\n","      <td>Female</td>\n","      <td>30</td>\n","      <td>8606 Victoria TerraceSuite 560</td>\n","      <td>5464</td>\n","      <td>Johnstonhaven</td>\n","      <td>Northern Territory</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>fulan 2</td>\n","      <td>Prefer not to say</td>\n","      <td>69</td>\n","      <td>8327 Kirlin SummitApt. 461</td>\n","      <td>8223</td>\n","      <td>New Zacharyfort</td>\n","      <td>South Australia</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>fulan 3</td>\n","      <td>Prefer not to say</td>\n","      <td>59</td>\n","      <td>269 Gemma SummitSuite 109</td>\n","      <td>5661</td>\n","      <td>Aliburgh</td>\n","      <td>Australian Capital Territory</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>fulan 4</td>\n","      <td>Prefer not to say</td>\n","      <td>67</td>\n","      <td>743 Bailey GroveSuite 141</td>\n","      <td>1729</td>\n","      <td>South Justinhaven</td>\n","      <td>Queensland</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>fulan 5</td>\n","      <td>Prefer not to say</td>\n","      <td>30</td>\n","      <td>48 Hyatt ManorSuite 375</td>\n","      <td>4032</td>\n","      <td>Griffithsshire</td>\n","      <td>Queensland</td>\n","      <td>Australia</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4aab08eb-adbf-4ed4-bde2-e84d42df6760')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4aab08eb-adbf-4ed4-bde2-e84d42df6760 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4aab08eb-adbf-4ed4-bde2-e84d42df6760');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2d025bf2-77a4-4ac8-8f11-f139139e07fd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2d025bf2-77a4-4ac8-8f11-f139139e07fd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2d025bf2-77a4-4ac8-8f11-f139139e07fd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"customers_df","summary":"{\n  \"name\": \"customers_df\",\n  \"rows\": 1007,\n  \"fields\": [\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 288,\n        \"min\": 1,\n        \"max\": 1000,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          522,\n          738,\n          741\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          \"fulan 522\",\n          \"fulan 738\",\n          \"fulan 741\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Female\",\n          \"Prefer not to say\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30,\n        \"min\": 20,\n        \"max\": 700,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          74,\n          24,\n          30\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"home_address\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          \"459 Sarah TerraceApt. 121\",\n          \"261 Savannah IslandSuite 304\",\n          \"19 Roberts GroveSuite 946\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2885,\n        \"min\": 2,\n        \"max\": 9998,\n        \"num_unique_values\": 955,\n        \"samples\": [\n          2155,\n          4176,\n          9567\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 961,\n        \"samples\": [\n          \"Port Alexandertown\",\n          \"New Mayaburgh\",\n          \"West Jackfort\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"South Australia\",\n          \"Western Australia\",\n          \"Northern Territory\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Australia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["orders_df = pd.read_csv(\"https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/orders.csv\")\n","orders_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"gyg4DPtWQVWd","executionInfo":{"status":"ok","timestamp":1734955898915,"user_tz":-420,"elapsed":167,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"27bd25df-56f2-43e5-c4a9-c0f37653636a"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   order_id  customer_id  payment order_date delivery_date\n","0         1           64    30811  2021-8-30    2021-09-24\n","1         2          473    50490   2021-2-3    2021-02-13\n","2         3          774    46763  2021-10-8    2021-11-03\n","3         4          433    39782   2021-5-6    2021-05-19\n","4         5          441    14719  2021-3-23    2021-03-24"],"text/html":["\n","  <div id=\"df-2f1f5fb6-91fe-41d0-9a4c-68f9e1b12e71\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>order_id</th>\n","      <th>customer_id</th>\n","      <th>payment</th>\n","      <th>order_date</th>\n","      <th>delivery_date</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>64</td>\n","      <td>30811</td>\n","      <td>2021-8-30</td>\n","      <td>2021-09-24</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>473</td>\n","      <td>50490</td>\n","      <td>2021-2-3</td>\n","      <td>2021-02-13</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>774</td>\n","      <td>46763</td>\n","      <td>2021-10-8</td>\n","      <td>2021-11-03</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>433</td>\n","      <td>39782</td>\n","      <td>2021-5-6</td>\n","      <td>2021-05-19</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>441</td>\n","      <td>14719</td>\n","      <td>2021-3-23</td>\n","      <td>2021-03-24</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f1f5fb6-91fe-41d0-9a4c-68f9e1b12e71')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2f1f5fb6-91fe-41d0-9a4c-68f9e1b12e71 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2f1f5fb6-91fe-41d0-9a4c-68f9e1b12e71');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2f90a2ff-8780-4124-9388-214e7cc92593\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2f90a2ff-8780-4124-9388-214e7cc92593')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2f90a2ff-8780-4124-9388-214e7cc92593 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"orders_df","summary":"{\n  \"name\": \"orders_df\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 288,\n        \"min\": 1,\n        \"max\": 1000,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          522,\n          738,\n          741\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 277,\n        \"min\": 1,\n        \"max\": 1000,\n        \"num_unique_values\": 617,\n        \"samples\": [\n          454,\n          597,\n          181\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14451,\n        \"min\": 10043,\n        \"max\": 59910,\n        \"num_unique_values\": 995,\n        \"samples\": [\n          13634,\n          56020,\n          19171\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 291,\n        \"samples\": [\n          \"2021-4-29\",\n          \"2021-7-16\",\n          \"2021-2-19\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"delivery_date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 305,\n        \"samples\": [\n          \"2021-05-24\",\n          \"2021-01-10\",\n          \"2021-09-13\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["product_df = pd.read_csv(\"https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/products.csv\")\n","product_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"wF7N3RwcQgXa","executionInfo":{"status":"ok","timestamp":1734955898915,"user_tz":-420,"elapsed":163,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"f12e8d99-21f6-46af-8681-a84720a5c679"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   product_id product_type  product_name size colour  price  quantity  \\\n","0           0        Shirt  Oxford Cloth   XS    red    114        66   \n","1           1        Shirt  Oxford Cloth    S    red    114        53   \n","2           2        Shirt  Oxford Cloth    M    red    114        54   \n","3           3        Shirt  Oxford Cloth    L    red    114        69   \n","4           4        Shirt  Oxford Cloth   XL    red    114        47   \n","\n","                                    description  \n","0  A red coloured, XS sized, Oxford Cloth Shirt  \n","1   A red coloured, S sized, Oxford Cloth Shirt  \n","2   A red coloured, M sized, Oxford Cloth Shirt  \n","3   A red coloured, L sized, Oxford Cloth Shirt  \n","4  A red coloured, XL sized, Oxford Cloth Shirt  "],"text/html":["\n","  <div id=\"df-c726e20a-ee71-4dc7-a25d-8620d6f197ab\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>product_id</th>\n","      <th>product_type</th>\n","      <th>product_name</th>\n","      <th>size</th>\n","      <th>colour</th>\n","      <th>price</th>\n","      <th>quantity</th>\n","      <th>description</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>Shirt</td>\n","      <td>Oxford Cloth</td>\n","      <td>XS</td>\n","      <td>red</td>\n","      <td>114</td>\n","      <td>66</td>\n","      <td>A red coloured, XS sized, Oxford Cloth Shirt</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>Shirt</td>\n","      <td>Oxford Cloth</td>\n","      <td>S</td>\n","      <td>red</td>\n","      <td>114</td>\n","      <td>53</td>\n","      <td>A red coloured, S sized, Oxford Cloth Shirt</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>Shirt</td>\n","      <td>Oxford Cloth</td>\n","      <td>M</td>\n","      <td>red</td>\n","      <td>114</td>\n","      <td>54</td>\n","      <td>A red coloured, M sized, Oxford Cloth Shirt</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>Shirt</td>\n","      <td>Oxford Cloth</td>\n","      <td>L</td>\n","      <td>red</td>\n","      <td>114</td>\n","      <td>69</td>\n","      <td>A red coloured, L sized, Oxford Cloth Shirt</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>Shirt</td>\n","      <td>Oxford Cloth</td>\n","      <td>XL</td>\n","      <td>red</td>\n","      <td>114</td>\n","      <td>47</td>\n","      <td>A red coloured, XL sized, Oxford Cloth Shirt</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c726e20a-ee71-4dc7-a25d-8620d6f197ab')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c726e20a-ee71-4dc7-a25d-8620d6f197ab button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c726e20a-ee71-4dc7-a25d-8620d6f197ab');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-468fd704-b257-44e1-ac9a-a3afd11a0029\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-468fd704-b257-44e1-ac9a-a3afd11a0029')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-468fd704-b257-44e1-ac9a-a3afd11a0029 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"product_df","summary":"{\n  \"name\": \"product_df\",\n  \"rows\": 1266,\n  \"fields\": [\n    {\n      \"column\": \"product_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 363,\n        \"min\": 0,\n        \"max\": 1259,\n        \"num_unique_values\": 1260,\n        \"samples\": [\n          76,\n          1026,\n          43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Shirt\",\n          \"Jacket\",\n          \"Trousers\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"Slim-Fit\",\n          \"Windbreaker\",\n          \"Cords\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"size\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"S\",\n          \"l\",\n          \"XS\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"colour\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"red\",\n          \"orange\",\n          \"indigo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 90,\n        \"max\": 119,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          93,\n          102,\n          114\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 40,\n        \"max\": 80,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          55,\n          50,\n          48\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1260,\n        \"samples\": [\n          \"A orange coloured, S sized, Flannel Shirt\",\n          \"A yellow coloured, S sized, Relaxed Leg Trousers\",\n          \"A orange coloured, L sized, Dress Shirt\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["sales_df = pd.read_csv(\"https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/sales.csv\")\n","sales_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"T4lc5hY_QkAq","executionInfo":{"status":"ok","timestamp":1734955898915,"user_tz":-420,"elapsed":159,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"68f34a47-8877-4366-c922-e4becb03a483"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   sales_id  order_id  product_id  price_per_unit  quantity  total_price\n","0         0         1         218             106         2        212.0\n","1         1         1         481             118         1        118.0\n","2         2         1           2              96         3        288.0\n","3         3         1        1002             106         2        212.0\n","4         4         1         691             113         3        339.0"],"text/html":["\n","  <div id=\"df-3b5e7ac6-6b67-470e-a832-e5bffdf5a14c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sales_id</th>\n","      <th>order_id</th>\n","      <th>product_id</th>\n","      <th>price_per_unit</th>\n","      <th>quantity</th>\n","      <th>total_price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>218</td>\n","      <td>106</td>\n","      <td>2</td>\n","      <td>212.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>481</td>\n","      <td>118</td>\n","      <td>1</td>\n","      <td>118.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>96</td>\n","      <td>3</td>\n","      <td>288.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1002</td>\n","      <td>106</td>\n","      <td>2</td>\n","      <td>212.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>691</td>\n","      <td>113</td>\n","      <td>3</td>\n","      <td>339.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3b5e7ac6-6b67-470e-a832-e5bffdf5a14c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3b5e7ac6-6b67-470e-a832-e5bffdf5a14c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3b5e7ac6-6b67-470e-a832-e5bffdf5a14c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-49c5f871-6858-47e2-bdab-e336aca0947c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-49c5f871-6858-47e2-bdab-e336aca0947c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-49c5f871-6858-47e2-bdab-e336aca0947c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"sales_df","summary":"{\n  \"name\": \"sales_df\",\n  \"rows\": 5000,\n  \"fields\": [\n    {\n      \"column\": \"sales_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1443,\n        \"min\": 0,\n        \"max\": 4999,\n        \"num_unique_values\": 5000,\n        \"samples\": [\n          1501,\n          2586,\n          2653\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 285,\n        \"min\": 1,\n        \"max\": 999,\n        \"num_unique_values\": 993,\n        \"samples\": [\n          925,\n          528,\n          571\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 363,\n        \"min\": 1,\n        \"max\": 1259,\n        \"num_unique_values\": 1233,\n        \"samples\": [\n          458,\n          630,\n          806\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price_per_unit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 90,\n        \"max\": 119,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          119,\n          90,\n          106\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 86.35244910123915,\n        \"min\": 90.0,\n        \"max\": 357.0,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          226.0,\n          212.0,\n          115.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["customers_df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BYBy6yhQQoJV","executionInfo":{"status":"ok","timestamp":1734955898916,"user_tz":-420,"elapsed":156,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"27a9fade-214c-4e28-d90d-f0a6612942bc"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1007 entries, 0 to 1006\n","Data columns (total 9 columns):\n"," #   Column         Non-Null Count  Dtype \n","---  ------         --------------  ----- \n"," 0   customer_id    1007 non-null   int64 \n"," 1   customer_name  1007 non-null   object\n"," 2   gender         989 non-null    object\n"," 3   age            1007 non-null   int64 \n"," 4   home_address   1007 non-null   object\n"," 5   zip_code       1007 non-null   int64 \n"," 6   city           1007 non-null   object\n"," 7   state          1007 non-null   object\n"," 8   country        1007 non-null   object\n","dtypes: int64(3), object(6)\n","memory usage: 70.9+ KB\n"]}]},{"cell_type":"code","source":["customers_df.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"DjSEOpuLQ47o","executionInfo":{"status":"ok","timestamp":1734955898917,"user_tz":-420,"elapsed":150,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"ca89530b-8c03-48be-eec1-7532d0239b5c"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["customer_id       0\n","customer_name     0\n","gender           18\n","age               0\n","home_address      0\n","zip_code          0\n","city              0\n","state             0\n","country           0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>customer_id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>customer_name</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>18</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>home_address</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>zip_code</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>city</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>state</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>country</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["customers_df.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FCNMS4N-RCW5","executionInfo":{"status":"ok","timestamp":1734955898917,"user_tz":-420,"elapsed":146,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"172f554c-a2dc-42aa-b8ca-766785808f1c"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["customers_df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"hMOxk4voRMBp","executionInfo":{"status":"ok","timestamp":1734955898918,"user_tz":-420,"elapsed":140,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"f641d7c7-615f-471c-b04d-02de5652fe8c"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       customer_id          age     zip_code\n","count  1007.000000  1007.000000  1007.000000\n","mean    501.726912    50.929494  5012.538232\n","std     288.673238    30.516299  2885.836112\n","min       1.000000    20.000000     2.000000\n","25%     252.500000    34.000000  2403.500000\n","50%     502.000000    50.000000  5087.000000\n","75%     751.500000    65.000000  7493.500000\n","max    1000.000000   700.000000  9998.000000"],"text/html":["\n","  <div id=\"df-f23ee895-053e-4719-a07c-03eac63cca3c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>customer_id</th>\n","      <th>age</th>\n","      <th>zip_code</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1007.000000</td>\n","      <td>1007.000000</td>\n","      <td>1007.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>501.726912</td>\n","      <td>50.929494</td>\n","      <td>5012.538232</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>288.673238</td>\n","      <td>30.516299</td>\n","      <td>2885.836112</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>20.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>252.500000</td>\n","      <td>34.000000</td>\n","      <td>2403.500000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>502.000000</td>\n","      <td>50.000000</td>\n","      <td>5087.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>751.500000</td>\n","      <td>65.000000</td>\n","      <td>7493.500000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1000.000000</td>\n","      <td>700.000000</td>\n","      <td>9998.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f23ee895-053e-4719-a07c-03eac63cca3c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f23ee895-053e-4719-a07c-03eac63cca3c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f23ee895-053e-4719-a07c-03eac63cca3c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-695ba73f-2804-4d43-8446-55203d2575f5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-695ba73f-2804-4d43-8446-55203d2575f5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-695ba73f-2804-4d43-8446-55203d2575f5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"customers_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 361.27592364932724,\n        \"min\": 1.0,\n        \"max\": 1007.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          501.7269116186693,\n          502.0,\n          1007.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 384.8758248387875,\n        \"min\": 20.0,\n        \"max\": 1007.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          50.92949354518371,\n          50.0,\n          1007.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3352.469418532352,\n        \"min\": 2.0,\n        \"max\": 9998.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5012.538232373387,\n          5087.0,\n          1007.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["orders_df.info()\n","orders_df.describe()\n","orders_df.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dEz9XNDPRV6n","executionInfo":{"status":"ok","timestamp":1734955898918,"user_tz":-420,"elapsed":136,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"7051e1e4-7f1f-455c-f9e0-a2a88316f2fd"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1000 entries, 0 to 999\n","Data columns (total 5 columns):\n"," #   Column         Non-Null Count  Dtype \n","---  ------         --------------  ----- \n"," 0   order_id       1000 non-null   int64 \n"," 1   customer_id    1000 non-null   int64 \n"," 2   payment        1000 non-null   int64 \n"," 3   order_date     1000 non-null   object\n"," 4   delivery_date  1000 non-null   object\n","dtypes: int64(3), object(2)\n","memory usage: 39.2+ KB\n"]},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["product_df.info()\n","product_df.describe()\n","product_df.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jZvrGSFXRpu1","executionInfo":{"status":"ok","timestamp":1734955900139,"user_tz":-420,"elapsed":1349,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"9def409f-96b1-4958-9f9b-8c1055fe031e"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1266 entries, 0 to 1265\n","Data columns (total 8 columns):\n"," #   Column        Non-Null Count  Dtype \n","---  ------        --------------  ----- \n"," 0   product_id    1266 non-null   int64 \n"," 1   product_type  1266 non-null   object\n"," 2   product_name  1266 non-null   object\n"," 3   size          1266 non-null   object\n"," 4   colour        1266 non-null   object\n"," 5   price         1266 non-null   int64 \n"," 6   quantity      1266 non-null   int64 \n"," 7   description   1266 non-null   object\n","dtypes: int64(3), object(5)\n","memory usage: 79.2+ KB\n"]},{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["sales_df.info()\n","sales_df.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":498},"id":"SeEjlppQSUc3","executionInfo":{"status":"ok","timestamp":1734955900140,"user_tz":-420,"elapsed":307,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"f070e9a6-2957-4509-fc32-b1b62146ee5c"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 5000 entries, 0 to 4999\n","Data columns (total 6 columns):\n"," #   Column          Non-Null Count  Dtype  \n","---  ------          --------------  -----  \n"," 0   sales_id        5000 non-null   int64  \n"," 1   order_id        5000 non-null   int64  \n"," 2   product_id      5000 non-null   int64  \n"," 3   price_per_unit  5000 non-null   int64  \n"," 4   quantity        5000 non-null   int64  \n"," 5   total_price     4981 non-null   float64\n","dtypes: float64(1), int64(5)\n","memory usage: 234.5 KB\n"]},{"output_type":"execute_result","data":{"text/plain":["sales_id           0\n","order_id           0\n","product_id         0\n","price_per_unit     0\n","quantity           0\n","total_price       19\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>sales_id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>order_id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>product_id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>price_per_unit</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>quantity</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>total_price</th>\n","      <td>19</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["print(sales_df.describe())\n","sales_df.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jhgdf_oBSukv","executionInfo":{"status":"ok","timestamp":1734955900142,"user_tz":-420,"elapsed":297,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"65e0733e-4e0d-49c9-ad9b-65d3e9051cf0"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["          sales_id     order_id   product_id  price_per_unit    quantity  \\\n","count  5000.000000  5000.000000  5000.000000     5000.000000  5000.00000   \n","mean   2499.500000   503.038200   634.053200      103.501600     1.99240   \n","std    1443.520003   285.964418   363.255794        9.195004     0.80751   \n","min       0.000000     1.000000     1.000000       90.000000     1.00000   \n","25%    1249.750000   258.000000   323.000000       95.000000     1.00000   \n","50%    2499.500000   504.500000   635.000000      102.000000     2.00000   \n","75%    3749.250000   749.000000   951.000000      112.000000     3.00000   \n","max    4999.000000   999.000000  1259.000000      119.000000     3.00000   \n","\n","       total_price  \n","count  4981.000000  \n","mean    206.307368  \n","std      86.352449  \n","min      90.000000  \n","25%     112.000000  \n","50%     204.000000  \n","75%     285.000000  \n","max     357.000000  \n"]},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["customers_df.drop_duplicates(inplace=True)"],"metadata":{"id":"0jk1KvRrTFvu","executionInfo":{"status":"ok","timestamp":1734955900143,"user_tz":-420,"elapsed":291,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["customers_df.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8iO0BBwvTS3M","executionInfo":{"status":"ok","timestamp":1734955900143,"user_tz":-420,"elapsed":290,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"ff5217eb-2561-4eae-f9ed-6a40aa411840"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["customers_df[customers_df.gender.isna()]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":892},"id":"tWtkNEEwTj7P","executionInfo":{"status":"ok","timestamp":1734955900144,"user_tz":-420,"elapsed":282,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"0a6f1f88-2d4c-45a3-d8f5-e1e9fa722245"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     customer_id customer_name gender  age                     home_address  \\\n","38            39      fulan 39    NaN   80  7440 Cameron Estate DrSuite 628   \n","167          168     fulan 168    NaN   27         2781 Berge MallSuite 452   \n","322          322     fulan 322    NaN   30        593 Becker CircleApt. 333   \n","393          393     fulan 393    NaN   34          5158 Levi HillSuite 531   \n","442          442     fulan 442    NaN   26           5157 Feil RoadApt. 633   \n","722          720     fulan 720    NaN   40         31 Jordan ParadeApt. 400   \n","745          743     fulan 743    NaN   57   09 Christopher StreetSuite 967   \n","773          771     fulan 771    NaN   74     7367 Wright JunctionApt. 773   \n","798          795     fulan 795    NaN   49          487 Summer MewsApt. 874   \n","801          798     fulan 798    NaN   56           27 Aiden KnollApt. 875   \n","825          822     fulan 822    NaN   59        41 Jenkins KnollSuite 438   \n","859          855     fulan 855    NaN   55       603 O'keefe KnollSuite 782   \n","863          859     fulan 859    NaN   38            32 Isla GroveApt. 078   \n","914          909     fulan 909    NaN   62    976 Murray Station StApt. 036   \n","934          929     fulan 929    NaN   68           394 Lily HillSuite 153   \n","948          943     fulan 943    NaN   64       3117 Heller PlaceSuite 149   \n","952          946     fulan 946    NaN   24      8227 Nicholas HillSuite 150   \n","994          988     fulan 988    NaN   35   1130 Turner Estate DrSuite 925   \n","\n","     zip_code                   city                         state    country  \n","38       4622  North Victoriachester            Northern Territory  Australia  \n","167      1975         North Leoburgh             Western Australia  Australia  \n","322      1640             Jacobiview             Western Australia  Australia  \n","393      1474             Johnsburgh                    Queensland  Australia  \n","442      7249             Port Chloe               New South Wales  Australia  \n","722      1380             West Henry               South Australia  Australia  \n","745      6226         Lake Lukemouth             Western Australia  Australia  \n","773      8882               Kuhntown                      Victoria  Australia  \n","798      1712            East Hayden  Australian Capital Territory  Australia  \n","801      6531               Port Sam  Australian Capital Territory  Australia  \n","825      2588        Lake Andrewport               South Australia  Australia  \n","859      8822        Port Dylanmouth                      Tasmania  Australia  \n","863      7711            Rosechester               New South Wales  Australia  \n","914      3227               Langfort                      Tasmania  Australia  \n","934      2353             Beahanfurt            Northern Territory  Australia  \n","948       822           North Elijah               South Australia  Australia  \n","952       115           South Jasper                    Queensland  Australia  \n","994      9386              New Harry             Western Australia  Australia  "],"text/html":["\n","  <div id=\"df-98524633-5856-415d-a3e3-c198b18bc271\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>customer_id</th>\n","      <th>customer_name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>home_address</th>\n","      <th>zip_code</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>country</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>38</th>\n","      <td>39</td>\n","      <td>fulan 39</td>\n","      <td>NaN</td>\n","      <td>80</td>\n","      <td>7440 Cameron Estate DrSuite 628</td>\n","      <td>4622</td>\n","      <td>North Victoriachester</td>\n","      <td>Northern Territory</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>167</th>\n","      <td>168</td>\n","      <td>fulan 168</td>\n","      <td>NaN</td>\n","      <td>27</td>\n","      <td>2781 Berge MallSuite 452</td>\n","      <td>1975</td>\n","      <td>North Leoburgh</td>\n","      <td>Western Australia</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>322</th>\n","      <td>322</td>\n","      <td>fulan 322</td>\n","      <td>NaN</td>\n","      <td>30</td>\n","      <td>593 Becker CircleApt. 333</td>\n","      <td>1640</td>\n","      <td>Jacobiview</td>\n","      <td>Western Australia</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>393</th>\n","      <td>393</td>\n","      <td>fulan 393</td>\n","      <td>NaN</td>\n","      <td>34</td>\n","      <td>5158 Levi HillSuite 531</td>\n","      <td>1474</td>\n","      <td>Johnsburgh</td>\n","      <td>Queensland</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>442</th>\n","      <td>442</td>\n","      <td>fulan 442</td>\n","      <td>NaN</td>\n","      <td>26</td>\n","      <td>5157 Feil RoadApt. 633</td>\n","      <td>7249</td>\n","      <td>Port Chloe</td>\n","      <td>New South Wales</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>722</th>\n","      <td>720</td>\n","      <td>fulan 720</td>\n","      <td>NaN</td>\n","      <td>40</td>\n","      <td>31 Jordan ParadeApt. 400</td>\n","      <td>1380</td>\n","      <td>West Henry</td>\n","      <td>South Australia</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>745</th>\n","      <td>743</td>\n","      <td>fulan 743</td>\n","      <td>NaN</td>\n","      <td>57</td>\n","      <td>09 Christopher StreetSuite 967</td>\n","      <td>6226</td>\n","      <td>Lake Lukemouth</td>\n","      <td>Western Australia</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>773</th>\n","      <td>771</td>\n","      <td>fulan 771</td>\n","      <td>NaN</td>\n","      <td>74</td>\n","      <td>7367 Wright JunctionApt. 773</td>\n","      <td>8882</td>\n","      <td>Kuhntown</td>\n","      <td>Victoria</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>798</th>\n","      <td>795</td>\n","      <td>fulan 795</td>\n","      <td>NaN</td>\n","      <td>49</td>\n","      <td>487 Summer MewsApt. 874</td>\n","      <td>1712</td>\n","      <td>East Hayden</td>\n","      <td>Australian Capital Territory</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>801</th>\n","      <td>798</td>\n","      <td>fulan 798</td>\n","      <td>NaN</td>\n","      <td>56</td>\n","      <td>27 Aiden KnollApt. 875</td>\n","      <td>6531</td>\n","      <td>Port Sam</td>\n","      <td>Australian Capital Territory</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>825</th>\n","      <td>822</td>\n","      <td>fulan 822</td>\n","      <td>NaN</td>\n","      <td>59</td>\n","      <td>41 Jenkins KnollSuite 438</td>\n","      <td>2588</td>\n","      <td>Lake Andrewport</td>\n","      <td>South Australia</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>859</th>\n","      <td>855</td>\n","      <td>fulan 855</td>\n","      <td>NaN</td>\n","      <td>55</td>\n","      <td>603 O'keefe KnollSuite 782</td>\n","      <td>8822</td>\n","      <td>Port Dylanmouth</td>\n","      <td>Tasmania</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>863</th>\n","      <td>859</td>\n","      <td>fulan 859</td>\n","      <td>NaN</td>\n","      <td>38</td>\n","      <td>32 Isla GroveApt. 078</td>\n","      <td>7711</td>\n","      <td>Rosechester</td>\n","      <td>New South Wales</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>914</th>\n","      <td>909</td>\n","      <td>fulan 909</td>\n","      <td>NaN</td>\n","      <td>62</td>\n","      <td>976 Murray Station StApt. 036</td>\n","      <td>3227</td>\n","      <td>Langfort</td>\n","      <td>Tasmania</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>934</th>\n","      <td>929</td>\n","      <td>fulan 929</td>\n","      <td>NaN</td>\n","      <td>68</td>\n","      <td>394 Lily HillSuite 153</td>\n","      <td>2353</td>\n","      <td>Beahanfurt</td>\n","      <td>Northern Territory</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>948</th>\n","      <td>943</td>\n","      <td>fulan 943</td>\n","      <td>NaN</td>\n","      <td>64</td>\n","      <td>3117 Heller PlaceSuite 149</td>\n","      <td>822</td>\n","      <td>North Elijah</td>\n","      <td>South Australia</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>952</th>\n","      <td>946</td>\n","      <td>fulan 946</td>\n","      <td>NaN</td>\n","      <td>24</td>\n","      <td>8227 Nicholas HillSuite 150</td>\n","      <td>115</td>\n","      <td>South Jasper</td>\n","      <td>Queensland</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>994</th>\n","      <td>988</td>\n","      <td>fulan 988</td>\n","      <td>NaN</td>\n","      <td>35</td>\n","      <td>1130 Turner Estate DrSuite 925</td>\n","      <td>9386</td>\n","      <td>New Harry</td>\n","      <td>Western Australia</td>\n","      <td>Australia</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98524633-5856-415d-a3e3-c198b18bc271')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-98524633-5856-415d-a3e3-c198b18bc271 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-98524633-5856-415d-a3e3-c198b18bc271');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fc99dc2a-8b19-4f23-80b4-039795b00200\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fc99dc2a-8b19-4f23-80b4-039795b00200')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fc99dc2a-8b19-4f23-80b4-039795b00200 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","repr_error":"0"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["customers_df.gender.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":210},"id":"7ng5rUcZTx8Z","executionInfo":{"status":"ok","timestamp":1734955900144,"user_tz":-420,"elapsed":279,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"ff331fe2-3338-4373-a56c-0544eac4cbbd"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["gender\n","Prefer not to say    725\n","Male                 143\n","Female               115\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Prefer not to say</th>\n","      <td>725</td>\n","    </tr>\n","    <tr>\n","      <th>Male</th>\n","      <td>143</td>\n","    </tr>\n","    <tr>\n","      <th>Female</th>\n","      <td>115</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["customers_df.fillna(value=\"Prefer not to say\", inplace=True)"],"metadata":{"id":"PnBcjaxHT0NS","executionInfo":{"status":"ok","timestamp":1734955900145,"user_tz":-420,"elapsed":276,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["customers_df.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"poc-czlbUGHP","executionInfo":{"status":"ok","timestamp":1734955900145,"user_tz":-420,"elapsed":270,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"080e3541-53f0-4993-950b-86b9472b01fa"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["customer_id      0\n","customer_name    0\n","gender           0\n","age              0\n","home_address     0\n","zip_code         0\n","city             0\n","state            0\n","country          0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>customer_id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>customer_name</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>home_address</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>zip_code</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>city</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>state</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>country</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["customers_df[customers_df.age == customers_df.age.max()]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":98},"id":"jF9rKkbTUJBh","executionInfo":{"status":"ok","timestamp":1734955900146,"user_tz":-420,"elapsed":267,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"5a62f25c-9dd5-42b7-e66a-cbc479644f4c"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     customer_id customer_name             gender  age  \\\n","967          961     fulan 961  Prefer not to say  700   \n","\n","                   home_address  zip_code        city            state  \\\n","967  29 Farrell ParadeSuite 818      6528  New Joseph  South Australia   \n","\n","       country  \n","967  Australia  "],"text/html":["\n","  <div id=\"df-85717d5c-07fb-45d6-af62-62e2db97b0c7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>customer_id</th>\n","      <th>customer_name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>home_address</th>\n","      <th>zip_code</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>country</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>967</th>\n","      <td>961</td>\n","      <td>fulan 961</td>\n","      <td>Prefer not to say</td>\n","      <td>700</td>\n","      <td>29 Farrell ParadeSuite 818</td>\n","      <td>6528</td>\n","      <td>New Joseph</td>\n","      <td>South Australia</td>\n","      <td>Australia</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85717d5c-07fb-45d6-af62-62e2db97b0c7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-85717d5c-07fb-45d6-af62-62e2db97b0c7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-85717d5c-07fb-45d6-af62-62e2db97b0c7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"customers_df[customers_df\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 961,\n        \"max\": 961,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          961\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"fulan 961\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Prefer not to say\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 700,\n        \"max\": 700,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          700\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"home_address\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"29 Farrell ParadeSuite 818\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 6528,\n        \"max\": 6528,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          6528\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"New Joseph\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"South Australia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Australia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["customers_df.age.replace(customers_df.age.max(), 70, inplace=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hhZ0nbqyUYhr","executionInfo":{"status":"ok","timestamp":1734955900146,"user_tz":-420,"elapsed":265,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"36ab8330-d435-4df2-9b4c-1481fe6280f4"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-21-b0aaf8dd8060>:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  customers_df.age.replace(customers_df.age.max(), 70, inplace=True)\n"]}]},{"cell_type":"code","source":["customers_df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"YCuzgJwlVGz8","executionInfo":{"status":"ok","timestamp":1734955900147,"user_tz":-420,"elapsed":256,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"e1e3ab70-d382-4248-b182-42fc19aa597b"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       customer_id          age     zip_code\n","count  1001.000000  1001.000000  1001.000000\n","mean    500.942058    50.323676  5000.693307\n","std     289.013599    22.665946  2886.084454\n","min       1.000000    20.000000     2.000000\n","25%     251.000000    34.000000  2398.000000\n","50%     501.000000    50.000000  5079.000000\n","75%     751.000000    65.000000  7454.000000\n","max    1000.000000   500.000000  9998.000000"],"text/html":["\n","  <div id=\"df-bf04c98b-357f-4f2b-b375-1780ad6c92a8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>customer_id</th>\n","      <th>age</th>\n","      <th>zip_code</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1001.000000</td>\n","      <td>1001.000000</td>\n","      <td>1001.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>500.942058</td>\n","      <td>50.323676</td>\n","      <td>5000.693307</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>289.013599</td>\n","      <td>22.665946</td>\n","      <td>2886.084454</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>20.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>251.000000</td>\n","      <td>34.000000</td>\n","      <td>2398.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>501.000000</td>\n","      <td>50.000000</td>\n","      <td>5079.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>751.000000</td>\n","      <td>65.000000</td>\n","      <td>7454.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1000.000000</td>\n","      <td>500.000000</td>\n","      <td>9998.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bf04c98b-357f-4f2b-b375-1780ad6c92a8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bf04c98b-357f-4f2b-b375-1780ad6c92a8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bf04c98b-357f-4f2b-b375-1780ad6c92a8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a2a3e769-cba0-44fb-abfc-8bfb9d4b81d4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a2a3e769-cba0-44fb-abfc-8bfb9d4b81d4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a2a3e769-cba0-44fb-abfc-8bfb9d4b81d4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"customers_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 360.2868487619088,\n        \"min\": 1.0,\n        \"max\": 1001.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          500.94205794205794,\n          501.0,\n          1001.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 355.28190303851795,\n        \"min\": 20.0,\n        \"max\": 1001.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          50.323676323676324,\n          50.0,\n          1001.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3347.567792359999,\n        \"min\": 2.0,\n        \"max\": 9998.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5000.693306693307,\n          5079.0,\n          1001.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["datetime_columns = [\"order_date\", \"delivery_date\"]\n","\n","for column in datetime_columns:\n","    orders_df[column] = pd.to_datetime(orders_df[column])"],"metadata":{"id":"kBsvnDsaVX9P","executionInfo":{"status":"ok","timestamp":1734955900148,"user_tz":-420,"elapsed":254,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["orders_df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uVtDICn8VnRd","executionInfo":{"status":"ok","timestamp":1734955900149,"user_tz":-420,"elapsed":254,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"b2ec5210-ad4c-4896-a8f2-b1e900952ec8"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1000 entries, 0 to 999\n","Data columns (total 5 columns):\n"," #   Column         Non-Null Count  Dtype         \n","---  ------         --------------  -----         \n"," 0   order_id       1000 non-null   int64         \n"," 1   customer_id    1000 non-null   int64         \n"," 2   payment        1000 non-null   int64         \n"," 3   order_date     1000 non-null   datetime64[ns]\n"," 4   delivery_date  1000 non-null   datetime64[ns]\n","dtypes: datetime64[ns](2), int64(3)\n","memory usage: 39.2 KB\n"]}]},{"cell_type":"code","source":["product_df.drop_duplicates(inplace=True)"],"metadata":{"id":"lD11gDWiVrKw","executionInfo":{"status":"ok","timestamp":1734955900150,"user_tz":-420,"elapsed":247,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["product_df.duplicated().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A_Cp2RTlVwvJ","executionInfo":{"status":"ok","timestamp":1734955900160,"user_tz":-420,"elapsed":252,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"63738dcc-5ba9-4ab1-c991-e2da40348474"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["sales_df[sales_df.total_price.isna()]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":645},"id":"DMIg84CAV0TI","executionInfo":{"status":"ok","timestamp":1734955901706,"user_tz":-420,"elapsed":1791,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"64b1524b-119f-4ed6-cb57-19ebcf067665"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      sales_id  order_id  product_id  price_per_unit  quantity  total_price\n","9            9         2        1196             105         1          NaN\n","121        121        27        1027              90         3          NaN\n","278        278        63         360              94         2          NaN\n","421        421        95        1091             115         1          NaN\n","489        489       108        1193             105         3          NaN\n","539        539       117         405             119         2          NaN\n","636        636       134         653              93         3          NaN\n","687        687       145        1138             102         1          NaN\n","854        854       177          64             104         1          NaN\n","1079      1079       222         908              94         3          NaN\n","1193      1193       248        1121             102         2          NaN\n","1313      1313       272         826             117         1          NaN\n","1548      1548       316         103             118         3          NaN\n","1688      1688       345         428             107         1          NaN\n","1775      1775       359         694             113         2          NaN\n","1902      1902       381        1218             105         3          NaN\n","2025      2025       408         611             112         3          NaN\n","2164      2164       436         583             100         3          NaN\n","2347      2347       476         696             113         2          NaN"],"text/html":["\n","  <div id=\"df-4056d501-f1f7-48b6-a92e-2a176b1c6808\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sales_id</th>\n","      <th>order_id</th>\n","      <th>product_id</th>\n","      <th>price_per_unit</th>\n","      <th>quantity</th>\n","      <th>total_price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>9</th>\n","      <td>9</td>\n","      <td>2</td>\n","      <td>1196</td>\n","      <td>105</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>121</th>\n","      <td>121</td>\n","      <td>27</td>\n","      <td>1027</td>\n","      <td>90</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>278</th>\n","      <td>278</td>\n","      <td>63</td>\n","      <td>360</td>\n","      <td>94</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>421</th>\n","      <td>421</td>\n","      <td>95</td>\n","      <td>1091</td>\n","      <td>115</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>489</th>\n","      <td>489</td>\n","      <td>108</td>\n","      <td>1193</td>\n","      <td>105</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>539</th>\n","      <td>539</td>\n","      <td>117</td>\n","      <td>405</td>\n","      <td>119</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>636</th>\n","      <td>636</td>\n","      <td>134</td>\n","      <td>653</td>\n","      <td>93</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>687</th>\n","      <td>687</td>\n","      <td>145</td>\n","      <td>1138</td>\n","      <td>102</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>854</th>\n","      <td>854</td>\n","      <td>177</td>\n","      <td>64</td>\n","      <td>104</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1079</th>\n","      <td>1079</td>\n","      <td>222</td>\n","      <td>908</td>\n","      <td>94</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1193</th>\n","      <td>1193</td>\n","      <td>248</td>\n","      <td>1121</td>\n","      <td>102</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1313</th>\n","      <td>1313</td>\n","      <td>272</td>\n","      <td>826</td>\n","      <td>117</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1548</th>\n","      <td>1548</td>\n","      <td>316</td>\n","      <td>103</td>\n","      <td>118</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1688</th>\n","      <td>1688</td>\n","      <td>345</td>\n","      <td>428</td>\n","      <td>107</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1775</th>\n","      <td>1775</td>\n","      <td>359</td>\n","      <td>694</td>\n","      <td>113</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1902</th>\n","      <td>1902</td>\n","      <td>381</td>\n","      <td>1218</td>\n","      <td>105</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2025</th>\n","      <td>2025</td>\n","      <td>408</td>\n","      <td>611</td>\n","      <td>112</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2164</th>\n","      <td>2164</td>\n","      <td>436</td>\n","      <td>583</td>\n","      <td>100</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2347</th>\n","      <td>2347</td>\n","      <td>476</td>\n","      <td>696</td>\n","      <td>113</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4056d501-f1f7-48b6-a92e-2a176b1c6808')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4056d501-f1f7-48b6-a92e-2a176b1c6808 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4056d501-f1f7-48b6-a92e-2a176b1c6808');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-aebdb601-5417-4291-aa7a-7df09e340ebf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aebdb601-5417-4291-aa7a-7df09e340ebf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-aebdb601-5417-4291-aa7a-7df09e340ebf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"sales_df[sales_df\",\n  \"rows\": 19,\n  \"fields\": [\n    {\n      \"column\": \"sales_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 732,\n        \"min\": 9,\n        \"max\": 2347,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          9,\n          539,\n          1313\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 145,\n        \"min\": 2,\n        \"max\": 476,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          2,\n          117,\n          272\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 369,\n        \"min\": 64,\n        \"max\": 1218,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          1196,\n          405,\n          826\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price_per_unit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 90,\n        \"max\": 119,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          118,\n          113,\n          105\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["sales_df[\"total_price\"] = sales_df[\"price_per_unit\"] * sales_df[\"quantity\"]"],"metadata":{"id":"-5jvWBvsV9Mv","executionInfo":{"status":"ok","timestamp":1734955901706,"user_tz":-420,"elapsed":573,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["sales_df.isna().sum()"],"metadata":{"id":"u-pSfZN2WWz8","executionInfo":{"status":"ok","timestamp":1734955901707,"user_tz":-420,"elapsed":572,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"08ce2c4a-2ed7-427b-9eef-a0cf44ebe61b","colab":{"base_uri":"https://localhost:8080/","height":272}},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sales_id          0\n","order_id          0\n","product_id        0\n","price_per_unit    0\n","quantity          0\n","total_price       0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>sales_id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>order_id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>product_id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>price_per_unit</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>quantity</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>total_price</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["customers_df.describe(include=\"all\")"],"metadata":{"id":"abwr8EYlWYNA","colab":{"base_uri":"https://localhost:8080/","height":412},"executionInfo":{"status":"ok","timestamp":1734955901707,"user_tz":-420,"elapsed":565,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"fcd3e5db-4f2f-47b2-b29d-731662b53db9"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        customer_id customer_name             gender          age  \\\n","count   1001.000000          1001               1001  1001.000000   \n","unique          NaN          1000                  3          NaN   \n","top             NaN     fulan 943  Prefer not to say          NaN   \n","freq            NaN             2                743          NaN   \n","mean     500.942058           NaN                NaN    50.323676   \n","std      289.013599           NaN                NaN    22.665946   \n","min        1.000000           NaN                NaN    20.000000   \n","25%      251.000000           NaN                NaN    34.000000   \n","50%      501.000000           NaN                NaN    50.000000   \n","75%      751.000000           NaN                NaN    65.000000   \n","max     1000.000000           NaN                NaN   500.000000   \n","\n","                      home_address     zip_code     city            state  \\\n","count                         1001  1001.000000     1001             1001   \n","unique                        1000          NaN      961                8   \n","top     3117 Heller PlaceSuite 149          NaN  New Ava  South Australia   \n","freq                             2          NaN        3              140   \n","mean                           NaN  5000.693307      NaN              NaN   \n","std                            NaN  2886.084454      NaN              NaN   \n","min                            NaN     2.000000      NaN              NaN   \n","25%                            NaN  2398.000000      NaN              NaN   \n","50%                            NaN  5079.000000      NaN              NaN   \n","75%                            NaN  7454.000000      NaN              NaN   \n","max                            NaN  9998.000000      NaN              NaN   \n","\n","          country  \n","count        1001  \n","unique          1  \n","top     Australia  \n","freq         1001  \n","mean          NaN  \n","std           NaN  \n","min           NaN  \n","25%           NaN  \n","50%           NaN  \n","75%           NaN  \n","max           NaN  "],"text/html":["\n","  <div id=\"df-36ada743-4ffd-449d-90c9-63c5dbe75dad\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>customer_id</th>\n","      <th>customer_name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>home_address</th>\n","      <th>zip_code</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>country</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1001.000000</td>\n","      <td>1001</td>\n","      <td>1001</td>\n","      <td>1001.000000</td>\n","      <td>1001</td>\n","      <td>1001.000000</td>\n","      <td>1001</td>\n","      <td>1001</td>\n","      <td>1001</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>NaN</td>\n","      <td>1000</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","      <td>1000</td>\n","      <td>NaN</td>\n","      <td>961</td>\n","      <td>8</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>NaN</td>\n","      <td>fulan 943</td>\n","      <td>Prefer not to say</td>\n","      <td>NaN</td>\n","      <td>3117 Heller PlaceSuite 149</td>\n","      <td>NaN</td>\n","      <td>New Ava</td>\n","      <td>South Australia</td>\n","      <td>Australia</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>NaN</td>\n","      <td>2</td>\n","      <td>743</td>\n","      <td>NaN</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","      <td>3</td>\n","      <td>140</td>\n","      <td>1001</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>500.942058</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>50.323676</td>\n","      <td>NaN</td>\n","      <td>5000.693307</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>289.013599</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>22.665946</td>\n","      <td>NaN</td>\n","      <td>2886.084454</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>20.000000</td>\n","      <td>NaN</td>\n","      <td>2.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>251.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>34.000000</td>\n","      <td>NaN</td>\n","      <td>2398.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>501.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>50.000000</td>\n","      <td>NaN</td>\n","      <td>5079.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>751.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>65.000000</td>\n","      <td>NaN</td>\n","      <td>7454.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1000.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>500.000000</td>\n","      <td>NaN</td>\n","      <td>9998.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-36ada743-4ffd-449d-90c9-63c5dbe75dad')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-36ada743-4ffd-449d-90c9-63c5dbe75dad button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-36ada743-4ffd-449d-90c9-63c5dbe75dad');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c665c745-1e3b-4f93-9904-24a3dd523bc8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c665c745-1e3b-4f93-9904-24a3dd523bc8')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c665c745-1e3b-4f93-9904-24a3dd523bc8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"customers_df\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 360.2868487619088,\n        \"min\": 1.0,\n        \"max\": 1001.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          500.94205794205794,\n          501.0,\n          1001.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1000,\n          \"2\",\n          \"1001\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          \"743\",\n          \"1001\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 355.28190303851795,\n        \"min\": 20.0,\n        \"max\": 1001.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          50.323676323676324,\n          50.0,\n          1001.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"home_address\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1000,\n          \"2\",\n          \"1001\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3347.567792359999,\n        \"min\": 2.0,\n        \"max\": 9998.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5000.693306693307,\n          5079.0,\n          1001.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          961,\n          \"3\",\n          \"1001\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          8,\n          \"140\",\n          \"1001\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"1001\",\n          1,\n          \"Australia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["customers_df.groupby(by=\"gender\").agg({\n","    \"customer_id\": \"nunique\",\n","    \"age\": [\"max\", \"min\", \"mean\", \"std\"]\n","})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"-WKl8Dzf2lAl","executionInfo":{"status":"ok","timestamp":1734955901708,"user_tz":-420,"elapsed":562,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"be2af094-e05d-470e-ac82-b22f4f14c464"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  customer_id  age                          \n","                      nunique  max min       mean        std\n","gender                                                      \n","Female                    115   79  20  49.147826  16.646607\n","Male                      143   80  20  51.230769  18.462635\n","Prefer not to say         742  500  20  50.331090  24.170178"],"text/html":["\n","  <div id=\"df-10a1be15-5314-4e8b-944e-a3c720594fe6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","\n","    .dataframe thead tr:last-of-type th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th></th>\n","      <th>customer_id</th>\n","      <th colspan=\"4\" halign=\"left\">age</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th>nunique</th>\n","      <th>max</th>\n","      <th>min</th>\n","      <th>mean</th>\n","      <th>std</th>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Female</th>\n","      <td>115</td>\n","      <td>79</td>\n","      <td>20</td>\n","      <td>49.147826</td>\n","      <td>16.646607</td>\n","    </tr>\n","    <tr>\n","      <th>Male</th>\n","      <td>143</td>\n","      <td>80</td>\n","      <td>20</td>\n","      <td>51.230769</td>\n","      <td>18.462635</td>\n","    </tr>\n","    <tr>\n","      <th>Prefer not to say</th>\n","      <td>742</td>\n","      <td>500</td>\n","      <td>20</td>\n","      <td>50.331090</td>\n","      <td>24.170178</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-10a1be15-5314-4e8b-944e-a3c720594fe6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-10a1be15-5314-4e8b-944e-a3c720594fe6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-10a1be15-5314-4e8b-944e-a3c720594fe6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c6df45a2-6928-4b9a-a9ba-cc8960a52bae\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c6df45a2-6928-4b9a-a9ba-cc8960a52bae')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c6df45a2-6928-4b9a-a9ba-cc8960a52bae button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"})\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": [\n        \"gender\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Female\",\n          \"Male\",\n          \"Prefer not to say\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"customer_id\",\n        \"nunique\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 354,\n        \"min\": 115,\n        \"max\": 742,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          115,\n          143,\n          742\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"age\",\n        \"max\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242,\n        \"min\": 79,\n        \"max\": 500,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          79,\n          80,\n          500\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"age\",\n        \"min\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 20,\n        \"max\": 20,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"age\",\n        \"mean\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0446840388191136,\n        \"min\": 49.14782608695652,\n        \"max\": 51.23076923076923,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          49.14782608695652\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"age\",\n        \"std\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.925941907851567,\n        \"min\": 16.646607303181355,\n        \"max\": 24.170178095894837,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          16.646607303181355\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["customers_df.groupby(by=\"city\").customer_id.nunique().sort_values(ascending=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":490},"id":"xDKN-b9p3IRJ","executionInfo":{"status":"ok","timestamp":1734955901709,"user_tz":-420,"elapsed":558,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"99635756-bd66-4c61-a15f-2784da90cb46"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["city\n","East Aidan       3\n","East Sophia      3\n","New Ava          3\n","West Jackfort    2\n","Corkeryshire     2\n","                ..\n","Jordanside       1\n","Josephland       1\n","Josephmouth      1\n","Justinport       1\n","Zacville         1\n","Name: customer_id, Length: 961, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>customer_id</th>\n","    </tr>\n","    <tr>\n","      <th>city</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>East Aidan</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>East Sophia</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>New Ava</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>West Jackfort</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Corkeryshire</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>Jordanside</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Josephland</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Josephmouth</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Justinport</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Zacville</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>961 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["customers_df.groupby(by=\"state\").customer_id.nunique().sort_values(ascending=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"mEhJxjCT3ZsZ","executionInfo":{"status":"ok","timestamp":1734955901724,"user_tz":-420,"elapsed":551,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"8b58691c-1927-4337-d45c-b47acdb32abd"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["state\n","South Australia                 139\n","Queensland                      134\n","New South Wales                 132\n","Northern Territory              125\n","Western Australia               124\n","Australian Capital Territory    121\n","Victoria                        121\n","Tasmania                        104\n","Name: customer_id, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>customer_id</th>\n","    </tr>\n","    <tr>\n","      <th>state</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>South Australia</th>\n","      <td>139</td>\n","    </tr>\n","    <tr>\n","      <th>Queensland</th>\n","      <td>134</td>\n","    </tr>\n","    <tr>\n","      <th>New South Wales</th>\n","      <td>132</td>\n","    </tr>\n","    <tr>\n","      <th>Northern Territory</th>\n","      <td>125</td>\n","    </tr>\n","    <tr>\n","      <th>Western Australia</th>\n","      <td>124</td>\n","    </tr>\n","    <tr>\n","      <th>Australian Capital Territory</th>\n","      <td>121</td>\n","    </tr>\n","    <tr>\n","      <th>Victoria</th>\n","      <td>121</td>\n","    </tr>\n","    <tr>\n","      <th>Tasmania</th>\n","      <td>104</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["delivery_time = orders_df[\"delivery_date\"] - orders_df[\"order_date\"]\n","delivery_time = delivery_time.apply(lambda x: x.total_seconds())\n","SECOND_TO_DAY = 86400\n","orders_df[\"delivery_time\"] = round(delivery_time/SECOND_TO_DAY)\n","orders_df.sample(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"0DGwo0fz3yo7","executionInfo":{"status":"ok","timestamp":1734955901729,"user_tz":-420,"elapsed":547,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"e3435b5d-f8ff-4886-a0c1-45f54421189f"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     order_id  customer_id  payment order_date delivery_date  delivery_time\n","289       290          364    48707 2021-08-01    2021-08-16           15.0\n","873       874          557    25370 2021-03-25    2021-04-10           16.0\n","44         45          571    21738 2021-05-30    2021-06-21           22.0\n","674       675          896    43080 2021-06-05    2021-06-13            8.0\n","128       129          428    42185 2021-05-24    2021-05-27            3.0"],"text/html":["\n","  <div id=\"df-08467a94-53ed-40ff-baad-92e11f172748\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>order_id</th>\n","      <th>customer_id</th>\n","      <th>payment</th>\n","      <th>order_date</th>\n","      <th>delivery_date</th>\n","      <th>delivery_time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>289</th>\n","      <td>290</td>\n","      <td>364</td>\n","      <td>48707</td>\n","      <td>2021-08-01</td>\n","      <td>2021-08-16</td>\n","      <td>15.0</td>\n","    </tr>\n","    <tr>\n","      <th>873</th>\n","      <td>874</td>\n","      <td>557</td>\n","      <td>25370</td>\n","      <td>2021-03-25</td>\n","      <td>2021-04-10</td>\n","      <td>16.0</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>45</td>\n","      <td>571</td>\n","      <td>21738</td>\n","      <td>2021-05-30</td>\n","      <td>2021-06-21</td>\n","      <td>22.0</td>\n","    </tr>\n","    <tr>\n","      <th>674</th>\n","      <td>675</td>\n","      <td>896</td>\n","      <td>43080</td>\n","      <td>2021-06-05</td>\n","      <td>2021-06-13</td>\n","      <td>8.0</td>\n","    </tr>\n","    <tr>\n","      <th>128</th>\n","      <td>129</td>\n","      <td>428</td>\n","      <td>42185</td>\n","      <td>2021-05-24</td>\n","      <td>2021-05-27</td>\n","      <td>3.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-08467a94-53ed-40ff-baad-92e11f172748')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-08467a94-53ed-40ff-baad-92e11f172748 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-08467a94-53ed-40ff-baad-92e11f172748');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-762039dd-357b-4444-b3d6-de9978230d4c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-762039dd-357b-4444-b3d6-de9978230d4c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-762039dd-357b-4444-b3d6-de9978230d4c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"orders_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 357,\n        \"min\": 45,\n        \"max\": 874,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          874,\n          129,\n          45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 205,\n        \"min\": 364,\n        \"max\": 896,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          557,\n          428,\n          571\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11895,\n        \"min\": 21738,\n        \"max\": 48707,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          25370,\n          42185,\n          21738\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2021-03-25 00:00:00\",\n        \"max\": \"2021-08-01 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2021-03-25 00:00:00\",\n          \"2021-05-24 00:00:00\",\n          \"2021-05-30 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"delivery_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2021-04-10 00:00:00\",\n        \"max\": \"2021-08-16 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2021-04-10 00:00:00\",\n          \"2021-05-27 00:00:00\",\n          \"2021-06-21 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"delivery_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.395944834840239,\n        \"min\": 3.0,\n        \"max\": 22.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          16.0,\n          3.0,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["orders_df.describe(include=\"all\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"vD_5p-N44qia","executionInfo":{"status":"ok","timestamp":1734955901729,"user_tz":-420,"elapsed":539,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"31306892-a2a2-4cce-a87f-561d0cd97e3c"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          order_id  customer_id       payment                  order_date  \\\n","count  1000.000000  1000.000000   1000.000000                        1000   \n","mean    500.500000   506.640000  33972.936000  2021-05-27 18:38:52.800000   \n","min       1.000000     1.000000  10043.000000         2021-01-01 00:00:00   \n","25%     250.750000   275.250000  21329.250000         2021-03-13 18:00:00   \n","50%     500.500000   515.000000  33697.500000         2021-05-27 12:00:00   \n","75%     750.250000   737.250000  46249.000000         2021-08-12 06:00:00   \n","max    1000.000000  1000.000000  59910.000000         2021-10-24 00:00:00   \n","std     288.819436   277.115502  14451.609047                         NaN   \n","\n","             delivery_date  delivery_time  \n","count                 1000    1000.000000  \n","mean   2021-06-10 20:31:12      14.078000  \n","min    2021-01-03 00:00:00       1.000000  \n","25%    2021-03-28 00:00:00       8.000000  \n","50%    2021-06-11 12:00:00      14.000000  \n","75%    2021-08-24 06:00:00      21.000000  \n","max    2021-11-20 00:00:00      27.000000  \n","std                    NaN       7.707225  "],"text/html":["\n","  <div id=\"df-c98a8fd8-b8ef-4b32-8512-ad78a0977116\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>order_id</th>\n","      <th>customer_id</th>\n","      <th>payment</th>\n","      <th>order_date</th>\n","      <th>delivery_date</th>\n","      <th>delivery_time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1000.000000</td>\n","      <td>1000.000000</td>\n","      <td>1000.000000</td>\n","      <td>1000</td>\n","      <td>1000</td>\n","      <td>1000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>500.500000</td>\n","      <td>506.640000</td>\n","      <td>33972.936000</td>\n","      <td>2021-05-27 18:38:52.800000</td>\n","      <td>2021-06-10 20:31:12</td>\n","      <td>14.078000</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>10043.000000</td>\n","      <td>2021-01-01 00:00:00</td>\n","      <td>2021-01-03 00:00:00</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>250.750000</td>\n","      <td>275.250000</td>\n","      <td>21329.250000</td>\n","      <td>2021-03-13 18:00:00</td>\n","      <td>2021-03-28 00:00:00</td>\n","      <td>8.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>500.500000</td>\n","      <td>515.000000</td>\n","      <td>33697.500000</td>\n","      <td>2021-05-27 12:00:00</td>\n","      <td>2021-06-11 12:00:00</td>\n","      <td>14.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>750.250000</td>\n","      <td>737.250000</td>\n","      <td>46249.000000</td>\n","      <td>2021-08-12 06:00:00</td>\n","      <td>2021-08-24 06:00:00</td>\n","      <td>21.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1000.000000</td>\n","      <td>1000.000000</td>\n","      <td>59910.000000</td>\n","      <td>2021-10-24 00:00:00</td>\n","      <td>2021-11-20 00:00:00</td>\n","      <td>27.000000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>288.819436</td>\n","      <td>277.115502</td>\n","      <td>14451.609047</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>7.707225</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c98a8fd8-b8ef-4b32-8512-ad78a0977116')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c98a8fd8-b8ef-4b32-8512-ad78a0977116 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c98a8fd8-b8ef-4b32-8512-ad78a0977116');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ec33b905-3829-484f-8968-d4badf4b40b4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ec33b905-3829-484f-8968-d4badf4b40b4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ec33b905-3829-484f-8968-d4badf4b40b4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"orders_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 360.1000917722167,\n        \"min\": 1.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1000.0,\n          500.5,\n          288.8194360957494\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 357.2833562908675,\n        \"min\": 1.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1000.0,\n          506.64,\n          737.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19630.599908727407,\n        \"min\": 1000.0,\n        \"max\": 59910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          33972.936,\n          46249.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000001\",\n        \"max\": \"2021-10-24 00:00:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"1000\",\n          \"2021-05-27 18:38:52.800000\",\n          \"2021-08-12 06:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"delivery_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000001\",\n        \"max\": \"2021-11-20 00:00:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"1000\",\n          \"2021-06-10 20:31:12\",\n          \"2021-08-24 06:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"delivery_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 348.96093680319854,\n        \"min\": 1.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.078,\n          21.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["customer_id_in_orders_df = orders_df.customer_id.tolist()\n","customers_df[\"status\"] = customers_df[\"customer_id\"].apply(lambda x: \"Active\" if x in customer_id_in_orders_df else \"Non Active\")\n","customers_df.sample(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":293},"id":"OJaYgbXo47i2","executionInfo":{"status":"ok","timestamp":1734955901730,"user_tz":-420,"elapsed":531,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"0a285c65-1f35-4aad-c602-d4ed4b782082"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     customer_id customer_name             gender  age  \\\n","998          992     fulan 992             Female   39   \n","660          659     fulan 659  Prefer not to say   57   \n","383          383     fulan 383  Prefer not to say   23   \n","906          902     fulan 902  Prefer not to say   58   \n","350          350     fulan 350  Prefer not to say   23   \n","\n","                    home_address  zip_code              city       state  \\\n","998  12 Daugherty ParadeApt. 846      2358   Lake Oliviatown  Queensland   \n","660   14 O'neill View RdApt. 908      9653       Sophiemouth    Tasmania   \n","383       831 Ava SquareApt. 776      2310  South Hannahstad    Victoria   \n","906     695 Zara TerraceApt. 843      5922   West Laurenstad    Tasmania   \n","350  41 Brown Estate DrSuite 039      4913        North Alex    Victoria   \n","\n","       country      status  \n","998  Australia  Non Active  \n","660  Australia      Active  \n","383  Australia      Active  \n","906  Australia  Non Active  \n","350  Australia      Active  "],"text/html":["\n","  <div id=\"df-d12c89c9-3da2-491d-83c4-8f629e09d390\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>customer_id</th>\n","      <th>customer_name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>home_address</th>\n","      <th>zip_code</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>country</th>\n","      <th>status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>998</th>\n","      <td>992</td>\n","      <td>fulan 992</td>\n","      <td>Female</td>\n","      <td>39</td>\n","      <td>12 Daugherty ParadeApt. 846</td>\n","      <td>2358</td>\n","      <td>Lake Oliviatown</td>\n","      <td>Queensland</td>\n","      <td>Australia</td>\n","      <td>Non Active</td>\n","    </tr>\n","    <tr>\n","      <th>660</th>\n","      <td>659</td>\n","      <td>fulan 659</td>\n","      <td>Prefer not to say</td>\n","      <td>57</td>\n","      <td>14 O'neill View RdApt. 908</td>\n","      <td>9653</td>\n","      <td>Sophiemouth</td>\n","      <td>Tasmania</td>\n","      <td>Australia</td>\n","      <td>Active</td>\n","    </tr>\n","    <tr>\n","      <th>383</th>\n","      <td>383</td>\n","      <td>fulan 383</td>\n","      <td>Prefer not to say</td>\n","      <td>23</td>\n","      <td>831 Ava SquareApt. 776</td>\n","      <td>2310</td>\n","      <td>South Hannahstad</td>\n","      <td>Victoria</td>\n","      <td>Australia</td>\n","      <td>Active</td>\n","    </tr>\n","    <tr>\n","      <th>906</th>\n","      <td>902</td>\n","      <td>fulan 902</td>\n","      <td>Prefer not to say</td>\n","      <td>58</td>\n","      <td>695 Zara TerraceApt. 843</td>\n","      <td>5922</td>\n","      <td>West Laurenstad</td>\n","      <td>Tasmania</td>\n","      <td>Australia</td>\n","      <td>Non Active</td>\n","    </tr>\n","    <tr>\n","      <th>350</th>\n","      <td>350</td>\n","      <td>fulan 350</td>\n","      <td>Prefer not to say</td>\n","      <td>23</td>\n","      <td>41 Brown Estate DrSuite 039</td>\n","      <td>4913</td>\n","      <td>North Alex</td>\n","      <td>Victoria</td>\n","      <td>Australia</td>\n","      <td>Active</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d12c89c9-3da2-491d-83c4-8f629e09d390')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d12c89c9-3da2-491d-83c4-8f629e09d390 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d12c89c9-3da2-491d-83c4-8f629e09d390');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1b09019d-a149-452b-9a0c-b754862c6e46\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1b09019d-a149-452b-9a0c-b754862c6e46')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1b09019d-a149-452b-9a0c-b754862c6e46 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"customers_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 292,\n        \"min\": 350,\n        \"max\": 992,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          659,\n          350,\n          383\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"fulan 659\",\n          \"fulan 350\",\n          \"fulan 383\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Prefer not to say\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 23,\n        \"max\": 58,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          57,\n          58\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"home_address\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"14 O'neill View RdApt. 908\",\n          \"41 Brown Estate DrSuite 039\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3029,\n        \"min\": 2310,\n        \"max\": 9653,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          9653,\n          4913\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Sophiemouth\",\n          \"North Alex\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Queensland\",\n          \"Tasmania\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Australia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Active\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["customers_df.groupby(by=\"status\").customer_id.count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"Ha9QLgkh5gLm","executionInfo":{"status":"ok","timestamp":1734955901732,"user_tz":-420,"elapsed":519,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"cacd24b3-a134-4a8c-d54d-4db422336f82"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["status\n","Active        617\n","Non Active    384\n","Name: customer_id, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>customer_id</th>\n","    </tr>\n","    <tr>\n","      <th>status</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Active</th>\n","      <td>617</td>\n","    </tr>\n","    <tr>\n","      <th>Non Active</th>\n","      <td>384</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["orders_customers_df = pd.merge(\n","    left=orders_df,\n","    right=customers_df,\n","    how=\"left\",\n","    left_on=\"customer_id\",\n","    right_on=\"customer_id\"\n",")\n","\n","orders_customers_df.sample(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":400},"id":"FQNKUw685sQS","executionInfo":{"status":"ok","timestamp":1734955901736,"user_tz":-420,"elapsed":519,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"b35a6f8f-699e-4f13-9941-9a6bacc71167"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     order_id  customer_id  payment order_date delivery_date  delivery_time  \\\n","161       162          431    20238 2021-04-25    2021-05-05           10.0   \n","229       230          497    54581 2021-08-31    2021-09-18           18.0   \n","149       150          462    34428 2021-06-22    2021-06-27            5.0   \n","267       268          530    57006 2021-03-16    2021-04-10           25.0   \n","26         27          443    35513 2021-05-16    2021-05-28           12.0   \n","\n","    customer_name             gender  age                  home_address  \\\n","161     fulan 431  Prefer not to say   41   535 Angelina CourtSuite 875   \n","229     fulan 497  Prefer not to say   31  0487 Jordan TerraceSuite 509   \n","149     fulan 462  Prefer not to say   45      22 Ellie View RdApt. 141   \n","267     fulan 530  Prefer not to say   63  2724 Madison SummitSuite 567   \n","26      fulan 443  Prefer not to say   49   033 Mitchell IslandApt. 732   \n","\n","     zip_code             city               state    country  status  \n","161      8422        Jademouth            Victoria  Australia  Active  \n","229      9290  North Aidentown  Northern Territory  Australia  Active  \n","149      1919   D'amoreborough     South Australia  Australia  Active  \n","267      9367        Lake Rose   Western Australia  Australia  Active  \n","26       9651      Crooksshire            Victoria  Australia  Active  "],"text/html":["\n","  <div id=\"df-922f1e38-e49a-49bc-aa9e-00fd0c23c401\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>order_id</th>\n","      <th>customer_id</th>\n","      <th>payment</th>\n","      <th>order_date</th>\n","      <th>delivery_date</th>\n","      <th>delivery_time</th>\n","      <th>customer_name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>home_address</th>\n","      <th>zip_code</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>country</th>\n","      <th>status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>161</th>\n","      <td>162</td>\n","      <td>431</td>\n","      <td>20238</td>\n","      <td>2021-04-25</td>\n","      <td>2021-05-05</td>\n","      <td>10.0</td>\n","      <td>fulan 431</td>\n","      <td>Prefer not to say</td>\n","      <td>41</td>\n","      <td>535 Angelina CourtSuite 875</td>\n","      <td>8422</td>\n","      <td>Jademouth</td>\n","      <td>Victoria</td>\n","      <td>Australia</td>\n","      <td>Active</td>\n","    </tr>\n","    <tr>\n","      <th>229</th>\n","      <td>230</td>\n","      <td>497</td>\n","      <td>54581</td>\n","      <td>2021-08-31</td>\n","      <td>2021-09-18</td>\n","      <td>18.0</td>\n","      <td>fulan 497</td>\n","      <td>Prefer not to say</td>\n","      <td>31</td>\n","      <td>0487 Jordan TerraceSuite 509</td>\n","      <td>9290</td>\n","      <td>North Aidentown</td>\n","      <td>Northern Territory</td>\n","      <td>Australia</td>\n","      <td>Active</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>150</td>\n","      <td>462</td>\n","      <td>34428</td>\n","      <td>2021-06-22</td>\n","      <td>2021-06-27</td>\n","      <td>5.0</td>\n","      <td>fulan 462</td>\n","      <td>Prefer not to say</td>\n","      <td>45</td>\n","      <td>22 Ellie View RdApt. 141</td>\n","      <td>1919</td>\n","      <td>D'amoreborough</td>\n","      <td>South Australia</td>\n","      <td>Australia</td>\n","      <td>Active</td>\n","    </tr>\n","    <tr>\n","      <th>267</th>\n","      <td>268</td>\n","      <td>530</td>\n","      <td>57006</td>\n","      <td>2021-03-16</td>\n","      <td>2021-04-10</td>\n","      <td>25.0</td>\n","      <td>fulan 530</td>\n","      <td>Prefer not to say</td>\n","      <td>63</td>\n","      <td>2724 Madison SummitSuite 567</td>\n","      <td>9367</td>\n","      <td>Lake Rose</td>\n","      <td>Western Australia</td>\n","      <td>Australia</td>\n","      <td>Active</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>27</td>\n","      <td>443</td>\n","      <td>35513</td>\n","      <td>2021-05-16</td>\n","      <td>2021-05-28</td>\n","      <td>12.0</td>\n","      <td>fulan 443</td>\n","      <td>Prefer not to say</td>\n","      <td>49</td>\n","      <td>033 Mitchell IslandApt. 732</td>\n","      <td>9651</td>\n","      <td>Crooksshire</td>\n","      <td>Victoria</td>\n","      <td>Australia</td>\n","      <td>Active</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-922f1e38-e49a-49bc-aa9e-00fd0c23c401')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-922f1e38-e49a-49bc-aa9e-00fd0c23c401 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-922f1e38-e49a-49bc-aa9e-00fd0c23c401');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4d9ab09a-2323-41b6-a5ea-0de8f0b797a6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4d9ab09a-2323-41b6-a5ea-0de8f0b797a6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4d9ab09a-2323-41b6-a5ea-0de8f0b797a6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"orders_customers_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92,\n        \"min\": 27,\n        \"max\": 268,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          230,\n          27,\n          150\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40,\n        \"min\": 431,\n        \"max\": 530,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          497,\n          443,\n          462\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15353,\n        \"min\": 20238,\n        \"max\": 57006,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          54581,\n          35513,\n          34428\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2021-03-16 00:00:00\",\n        \"max\": \"2021-08-31 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2021-08-31 00:00:00\",\n          \"2021-05-16 00:00:00\",\n          \"2021-06-22 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"delivery_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2021-04-10 00:00:00\",\n        \"max\": \"2021-09-18 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2021-09-18 00:00:00\",\n          \"2021-05-28 00:00:00\",\n          \"2021-06-27 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"delivery_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.713624310270756,\n        \"min\": 5.0,\n        \"max\": 25.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          18.0,\n          12.0,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"customer_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"fulan 497\",\n          \"fulan 443\",\n          \"fulan 462\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Prefer not to say\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 31,\n        \"max\": 63,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"home_address\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0487 Jordan TerraceSuite 509\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip_code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3280,\n        \"min\": 1919,\n        \"max\": 9651,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          9290\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"North Aidentown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Northern Territory\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Australia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Active\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["orders_customers_df.groupby(by=\"city\").order_id.nunique().sort_values(ascending=False).reset_index().head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"gw5vr2Aa6B0x","executionInfo":{"status":"ok","timestamp":1734955901737,"user_tz":-420,"elapsed":512,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"cc13f90b-12c2-45a5-a569-b533ad343631"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         city  order_id\n","0  Jordanside         6\n","1     New Ava         6\n","2   Lake Rose         5\n","3  O'keefeton         5\n","4    East Max         5"],"text/html":["\n","  <div id=\"df-405aa7b8-13fa-4a26-8aee-3b27cadc1e62\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>city</th>\n","      <th>order_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Jordanside</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>New Ava</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Lake Rose</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>O'keefeton</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>East Max</td>\n","      <td>5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-405aa7b8-13fa-4a26-8aee-3b27cadc1e62')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-405aa7b8-13fa-4a26-8aee-3b27cadc1e62 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-405aa7b8-13fa-4a26-8aee-3b27cadc1e62');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9fc50a5f-b68e-4c42-86d0-770fb4aa560d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9fc50a5f-b68e-4c42-86d0-770fb4aa560d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9fc50a5f-b68e-4c42-86d0-770fb4aa560d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"orders_customers_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"New Ava\",\n          \"East Max\",\n          \"Lake Rose\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 5,\n        \"max\": 6,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          5,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["orders_customers_df.groupby(by=\"state\").order_id.nunique().sort_values(ascending=False).reset_index().head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"YZpZQ5-V6dSQ","executionInfo":{"status":"ok","timestamp":1734955901741,"user_tz":-420,"elapsed":498,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"57bc8747-8145-44b9-c37a-a871cf232cda"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          state  order_id\n","0               South Australia       148\n","1                    Queensland       139\n","2             Western Australia       130\n","3               New South Wales       129\n","4  Australian Capital Territory       118"],"text/html":["\n","  <div id=\"df-b181529c-a55e-4075-b3db-bea2d65484b5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>state</th>\n","      <th>order_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>South Australia</td>\n","      <td>148</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Queensland</td>\n","      <td>139</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Western Australia</td>\n","      <td>130</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>New South Wales</td>\n","      <td>129</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Australian Capital Territory</td>\n","      <td>118</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b181529c-a55e-4075-b3db-bea2d65484b5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b181529c-a55e-4075-b3db-bea2d65484b5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b181529c-a55e-4075-b3db-bea2d65484b5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-260b1b7b-4fb8-4e44-8689-472fdeb8d10c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-260b1b7b-4fb8-4e44-8689-472fdeb8d10c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-260b1b7b-4fb8-4e44-8689-472fdeb8d10c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"orders_customers_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Queensland\",\n          \"Australian Capital Territory\",\n          \"Western Australia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 118,\n        \"max\": 148,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          139,\n          118,\n          130\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["orders_customers_df.groupby(by=\"gender\").order_id.nunique().sort_values(ascending=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":210},"id":"mCGLX_lr6oLm","executionInfo":{"status":"ok","timestamp":1734955901742,"user_tz":-420,"elapsed":480,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"de323d35-bde1-41f3-bf3b-c4b81576dbcf"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["gender\n","Prefer not to say    725\n","Female               139\n","Male                 136\n","Name: order_id, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>order_id</th>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Prefer not to say</th>\n","      <td>725</td>\n","    </tr>\n","    <tr>\n","      <th>Female</th>\n","      <td>139</td>\n","    </tr>\n","    <tr>\n","      <th>Male</th>\n","      <td>136</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["orders_customers_df.groupby(by=\"age\").order_id.nunique().sort_values(ascending=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":490},"id":"D1RQJPTa6y6w","executionInfo":{"status":"ok","timestamp":1734955901743,"user_tz":-420,"elapsed":476,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"4e28190f-8d18-4ac0-ed86-8960abcf4bc8"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age\n","57    34\n","75    27\n","32    27\n","38    26\n","63    26\n","      ..\n","72     8\n","29     8\n","77     8\n","33     7\n","65     7\n","Name: order_id, Length: 61, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>order_id</th>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>57</th>\n","      <td>34</td>\n","    </tr>\n","    <tr>\n","      <th>75</th>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>26</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>26</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>72</th>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>77</th>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>65</th>\n","      <td>7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>61 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["orders_customers_df[\"age_group\"] = orders_customers_df[\"age\"].apply(lambda age: \"Youth\" if age <= 24 else (\"Seniors\" if age > 64 else \"Adults\"))\n","orders_customers_df.groupby(by=\"age_group\").order_id.nunique().sort_values(ascending=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":210},"id":"Nb5U9d3Q65Ak","executionInfo":{"status":"ok","timestamp":1734955901744,"user_tz":-420,"elapsed":470,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"b082211d-c767-4c41-b188-dddb88edb164"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age_group\n","Adults     681\n","Seniors    226\n","Youth       93\n","Name: order_id, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>order_id</th>\n","    </tr>\n","    <tr>\n","      <th>age_group</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Adults</th>\n","      <td>681</td>\n","    </tr>\n","    <tr>\n","      <th>Seniors</th>\n","      <td>226</td>\n","    </tr>\n","    <tr>\n","      <th>Youth</th>\n","      <td>93</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["product_df.describe(include=\"all\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":412},"id":"NK5BbvWt7meV","executionInfo":{"status":"ok","timestamp":1734955901744,"user_tz":-420,"elapsed":465,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"e58585d9-5283-4707-90cb-313a505929df"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         product_id product_type product_name  size colour        price  \\\n","count   1260.000000         1260         1260  1260   1260  1260.000000   \n","unique          NaN            3           35     8      7          NaN   \n","top             NaN        Shirt        Denim    XS    red          NaN   \n","freq            NaN          420           70   252    180          NaN   \n","mean     629.500000          NaN          NaN   NaN    NaN   105.805556   \n","std      363.874979          NaN          NaN   NaN    NaN     9.704423   \n","min        0.000000          NaN          NaN   NaN    NaN    90.000000   \n","25%      314.750000          NaN          NaN   NaN    NaN    95.750000   \n","50%      629.500000          NaN          NaN   NaN    NaN   108.500000   \n","75%      944.250000          NaN          NaN   NaN    NaN   114.000000   \n","max     1259.000000          NaN          NaN   NaN    NaN   119.000000   \n","\n","           quantity                                   description  \n","count   1260.000000                                          1260  \n","unique          NaN                                          1260  \n","top             NaN  A red coloured, XS sized, Oxford Cloth Shirt  \n","freq            NaN                                             1  \n","mean      60.150000                                           NaN  \n","std       11.670573                                           NaN  \n","min       40.000000                                           NaN  \n","25%       50.000000                                           NaN  \n","50%       60.000000                                           NaN  \n","75%       70.000000                                           NaN  \n","max       80.000000                                           NaN  "],"text/html":["\n","  <div id=\"df-1f4518d6-4dfb-4406-a7ba-07e28fbe81f9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>product_id</th>\n","      <th>product_type</th>\n","      <th>product_name</th>\n","      <th>size</th>\n","      <th>colour</th>\n","      <th>price</th>\n","      <th>quantity</th>\n","      <th>description</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1260.000000</td>\n","      <td>1260</td>\n","      <td>1260</td>\n","      <td>1260</td>\n","      <td>1260</td>\n","      <td>1260.000000</td>\n","      <td>1260.000000</td>\n","      <td>1260</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>NaN</td>\n","      <td>3</td>\n","      <td>35</td>\n","      <td>8</td>\n","      <td>7</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1260</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>NaN</td>\n","      <td>Shirt</td>\n","      <td>Denim</td>\n","      <td>XS</td>\n","      <td>red</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>A red coloured, XS sized, Oxford Cloth Shirt</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>NaN</td>\n","      <td>420</td>\n","      <td>70</td>\n","      <td>252</td>\n","      <td>180</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>629.500000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>105.805556</td>\n","      <td>60.150000</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>363.874979</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>9.704423</td>\n","      <td>11.670573</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>90.000000</td>\n","      <td>40.000000</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>314.750000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>95.750000</td>\n","      <td>50.000000</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>629.500000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>108.500000</td>\n","      <td>60.000000</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>944.250000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>114.000000</td>\n","      <td>70.000000</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1259.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>119.000000</td>\n","      <td>80.000000</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f4518d6-4dfb-4406-a7ba-07e28fbe81f9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1f4518d6-4dfb-4406-a7ba-07e28fbe81f9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1f4518d6-4dfb-4406-a7ba-07e28fbe81f9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-40f4967f-fa3c-4856-b177-7b993aae232a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-40f4967f-fa3c-4856-b177-7b993aae232a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-40f4967f-fa3c-4856-b177-7b993aae232a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"product_df\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"product_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 453.89124063660535,\n        \"min\": 0.0,\n        \"max\": 1260.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1260.0,\n          629.5,\n          944.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          \"420\",\n          \"1260\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          35,\n          \"70\",\n          \"1260\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"size\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          8,\n          \"252\",\n          \"1260\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"colour\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7,\n          \"180\",\n          \"1260\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 414.4746006312261,\n        \"min\": 9.704422855767943,\n        \"max\": 1260.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          105.80555555555556,\n          108.5,\n          1260.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 427.2000914824068,\n        \"min\": 11.670572552422172,\n        \"max\": 1260.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          60.15,\n          60.0,\n          1260.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"1260\",\n          \"A red coloured, XS sized, Oxford Cloth Shirt\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["sales_df.describe(include=\"all\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"Vhn96GBt7qGZ","executionInfo":{"status":"ok","timestamp":1734955901745,"user_tz":-420,"elapsed":462,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"e884808a-97d3-407d-e45f-1b4688723954"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          sales_id     order_id   product_id  price_per_unit    quantity  \\\n","count  5000.000000  5000.000000  5000.000000     5000.000000  5000.00000   \n","mean   2499.500000   503.038200   634.053200      103.501600     1.99240   \n","std    1443.520003   285.964418   363.255794        9.195004     0.80751   \n","min       0.000000     1.000000     1.000000       90.000000     1.00000   \n","25%    1249.750000   258.000000   323.000000       95.000000     1.00000   \n","50%    2499.500000   504.500000   635.000000      102.000000     2.00000   \n","75%    3749.250000   749.000000   951.000000      112.000000     3.00000   \n","max    4999.000000   999.000000  1259.000000      119.000000     3.00000   \n","\n","       total_price  \n","count  5000.000000  \n","mean    206.360000  \n","std      86.357457  \n","min      90.000000  \n","25%     112.000000  \n","50%     204.000000  \n","75%     285.000000  \n","max     357.000000  "],"text/html":["\n","  <div id=\"df-ab1784dc-1d55-46e9-96b4-6f323813e7b8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sales_id</th>\n","      <th>order_id</th>\n","      <th>product_id</th>\n","      <th>price_per_unit</th>\n","      <th>quantity</th>\n","      <th>total_price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5000.000000</td>\n","      <td>5000.000000</td>\n","      <td>5000.000000</td>\n","      <td>5000.000000</td>\n","      <td>5000.00000</td>\n","      <td>5000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2499.500000</td>\n","      <td>503.038200</td>\n","      <td>634.053200</td>\n","      <td>103.501600</td>\n","      <td>1.99240</td>\n","      <td>206.360000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1443.520003</td>\n","      <td>285.964418</td>\n","      <td>363.255794</td>\n","      <td>9.195004</td>\n","      <td>0.80751</td>\n","      <td>86.357457</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>90.000000</td>\n","      <td>1.00000</td>\n","      <td>90.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1249.750000</td>\n","      <td>258.000000</td>\n","      <td>323.000000</td>\n","      <td>95.000000</td>\n","      <td>1.00000</td>\n","      <td>112.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2499.500000</td>\n","      <td>504.500000</td>\n","      <td>635.000000</td>\n","      <td>102.000000</td>\n","      <td>2.00000</td>\n","      <td>204.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>3749.250000</td>\n","      <td>749.000000</td>\n","      <td>951.000000</td>\n","      <td>112.000000</td>\n","      <td>3.00000</td>\n","      <td>285.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>4999.000000</td>\n","      <td>999.000000</td>\n","      <td>1259.000000</td>\n","      <td>119.000000</td>\n","      <td>3.00000</td>\n","      <td>357.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ab1784dc-1d55-46e9-96b4-6f323813e7b8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ab1784dc-1d55-46e9-96b4-6f323813e7b8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ab1784dc-1d55-46e9-96b4-6f323813e7b8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6c9c7d48-2b64-428d-b5d3-6fa08e94e662\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6c9c7d48-2b64-428d-b5d3-6fa08e94e662')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6c9c7d48-2b64-428d-b5d3-6fa08e94e662 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"sales_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"sales_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1801.805240520758,\n        \"min\": 0.0,\n        \"max\": 5000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          5000.0,\n          2499.5,\n          3749.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1630.1891811922642,\n        \"min\": 1.0,\n        \"max\": 5000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          503.0382,\n          504.5,\n          5000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1604.83032752212,\n        \"min\": 1.0,\n        \"max\": 5000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          634.0532,\n          635.0,\n          5000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price_per_unit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1736.2495746321288,\n        \"min\": 9.195004462283453,\n        \"max\": 5000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          103.5016,\n          102.0,\n          5000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1767.120670724837,\n        \"min\": 0.807510157540393,\n        \"max\": 5000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          5000.0,\n          1.9924,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1702.7452131678087,\n        \"min\": 86.35745666741477,\n        \"max\": 5000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          206.36,\n          204.0,\n          5000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["product_df.sort_values(by=\"price\", ascending=False).head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"-mueKA4678Tb","executionInfo":{"status":"ok","timestamp":1734955903759,"user_tz":-420,"elapsed":2465,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"fb04609b-cfd0-45cc-9e61-3535d4e6a15a"},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     product_id product_type product_name size  colour  price  quantity  \\\n","704         698       Jacket        Parka    L  violet    119        53   \n","671         665       Jacket        Parka   XS     red    119        65   \n","698         692       Jacket        Parka    M  indigo    119        66   \n","699         693       Jacket        Parka    L  indigo    119        44   \n","700         694       Jacket        Parka   XL  indigo    119        78   \n","\n","                                   description  \n","704   A violet coloured, L sized, Parka Jacket  \n","671     A red coloured, XS sized, Parka Jacket  \n","698   A indigo coloured, M sized, Parka Jacket  \n","699   A indigo coloured, L sized, Parka Jacket  \n","700  A indigo coloured, XL sized, Parka Jacket  "],"text/html":["\n","  <div id=\"df-59c61ed7-6a53-43cc-b980-9f9094b3c540\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>product_id</th>\n","      <th>product_type</th>\n","      <th>product_name</th>\n","      <th>size</th>\n","      <th>colour</th>\n","      <th>price</th>\n","      <th>quantity</th>\n","      <th>description</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>704</th>\n","      <td>698</td>\n","      <td>Jacket</td>\n","      <td>Parka</td>\n","      <td>L</td>\n","      <td>violet</td>\n","      <td>119</td>\n","      <td>53</td>\n","      <td>A violet coloured, L sized, Parka Jacket</td>\n","    </tr>\n","    <tr>\n","      <th>671</th>\n","      <td>665</td>\n","      <td>Jacket</td>\n","      <td>Parka</td>\n","      <td>XS</td>\n","      <td>red</td>\n","      <td>119</td>\n","      <td>65</td>\n","      <td>A red coloured, XS sized, Parka Jacket</td>\n","    </tr>\n","    <tr>\n","      <th>698</th>\n","      <td>692</td>\n","      <td>Jacket</td>\n","      <td>Parka</td>\n","      <td>M</td>\n","      <td>indigo</td>\n","      <td>119</td>\n","      <td>66</td>\n","      <td>A indigo coloured, M sized, Parka Jacket</td>\n","    </tr>\n","    <tr>\n","      <th>699</th>\n","      <td>693</td>\n","      <td>Jacket</td>\n","      <td>Parka</td>\n","      <td>L</td>\n","      <td>indigo</td>\n","      <td>119</td>\n","      <td>44</td>\n","      <td>A indigo coloured, L sized, Parka Jacket</td>\n","    </tr>\n","    <tr>\n","      <th>700</th>\n","      <td>694</td>\n","      <td>Jacket</td>\n","      <td>Parka</td>\n","      <td>XL</td>\n","      <td>indigo</td>\n","      <td>119</td>\n","      <td>78</td>\n","      <td>A indigo coloured, XL sized, Parka Jacket</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59c61ed7-6a53-43cc-b980-9f9094b3c540')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-59c61ed7-6a53-43cc-b980-9f9094b3c540 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-59c61ed7-6a53-43cc-b980-9f9094b3c540');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4d22c440-a455-424c-8250-997c003f7052\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4d22c440-a455-424c-8250-997c003f7052')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4d22c440-a455-424c-8250-997c003f7052 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"product_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"product_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 665,\n        \"max\": 698,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          665,\n          694,\n          692\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Jacket\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Parka\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"size\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"XS\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"colour\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"violet\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 119,\n        \"max\": 119,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          119\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 44,\n        \"max\": 78,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          65\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"A red coloured, XS sized, Parka Jacket\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["product_df.groupby(by=\"product_type\").agg({\n","    \"product_id\": \"nunique\",\n","    \"quantity\": \"sum\",\n","    \"price\": [\"min\", \"max\"]\n","})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"n3twuC6o8Xt3","executionInfo":{"status":"ok","timestamp":1734955903760,"user_tz":-420,"elapsed":210,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"660b25eb-7e6e-4738-f41e-607464422c6d"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             product_id quantity price     \n","                nunique      sum   min  max\n","product_type                               \n","Jacket              420    25387    90  119\n","Shirt               420    25263    92  119\n","Trousers            420    25139    90  119"],"text/html":["\n","  <div id=\"df-87a768f7-5b8c-40ff-94f2-6457d52babb0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","\n","    .dataframe thead tr:last-of-type th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th></th>\n","      <th>product_id</th>\n","      <th>quantity</th>\n","      <th colspan=\"2\" halign=\"left\">price</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th>nunique</th>\n","      <th>sum</th>\n","      <th>min</th>\n","      <th>max</th>\n","    </tr>\n","    <tr>\n","      <th>product_type</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Jacket</th>\n","      <td>420</td>\n","      <td>25387</td>\n","      <td>90</td>\n","      <td>119</td>\n","    </tr>\n","    <tr>\n","      <th>Shirt</th>\n","      <td>420</td>\n","      <td>25263</td>\n","      <td>92</td>\n","      <td>119</td>\n","    </tr>\n","    <tr>\n","      <th>Trousers</th>\n","      <td>420</td>\n","      <td>25139</td>\n","      <td>90</td>\n","      <td>119</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-87a768f7-5b8c-40ff-94f2-6457d52babb0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-87a768f7-5b8c-40ff-94f2-6457d52babb0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-87a768f7-5b8c-40ff-94f2-6457d52babb0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d646f5df-b549-4333-b355-52ad5ab4a0c3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d646f5df-b549-4333-b355-52ad5ab4a0c3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d646f5df-b549-4333-b355-52ad5ab4a0c3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"})\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": [\n        \"product_type\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Jacket\",\n          \"Shirt\",\n          \"Trousers\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"product_id\",\n        \"nunique\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 420,\n        \"max\": 420,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          420\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"quantity\",\n        \"sum\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 124,\n        \"min\": 25139,\n        \"max\": 25387,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          25387\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"min\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 90,\n        \"max\": 92,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"max\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 119,\n        \"max\": 119,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          119\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["product_df.groupby(by=\"product_name\").agg({\n","    \"product_id\": \"nunique\",\n","    \"quantity\": \"sum\",\n","    \"price\": [\"min\", \"max\"]\n","})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"49wm-zaF8rpC","executionInfo":{"status":"ok","timestamp":1734955903760,"user_tz":-420,"elapsed":200,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"c5c7edac-3d45-495b-e990-2b489fd6dbf4"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  product_id quantity price     \n","                     nunique      sum   min  max\n","product_name                                    \n","Bomber                    35     2083    90   90\n","Camp Collared             35     2071   112  112\n","Cardigan                  35     2032   118  118\n","Cargo Pants               35     2146   106  106\n","Casual Slim Fit           35     2086   113  113\n","Chambray                  35     2020   105  105\n","Chinos                    35     2101   100  100\n","Coach                     35     2158   115  115\n","Cords                     35     2260   113  113\n","Cropped                   35     2085    99   99\n","Cuban Collar              35     2017    93   93\n","Denim                     70     4204    92  115\n","Drawstring                35     2042   104  104\n","Dress                     35     2125   119  119\n","Flannel                   35     2135    96   96\n","Henley                    35     2051    92   92\n","High-Waisted              35     2198    98   98\n","Joggers                   35     2107    94   94\n","Leather                   35     2276   113  113\n","Linen                     35     2138   116  116\n","Mandarin Collar           35     2203   108  108\n","Oxford Cloth              35     2071   114  114\n","Parka                     35     2201   119  119\n","Peacoat                   35     2067   102  102\n","Pleated                   35     2030    90   90\n","Polo                      35     2196   117  117\n","Puffer                    35     1946   110  110\n","Pullover                  35     2184   114  114\n","Relaxed Leg               35     2002    95   95\n","Shearling                 35     2169    95   95\n","Slim-Fit                  35     2155   119  119\n","Tracksuit Bottoms         35     2038    91   91\n","Trench Coat               35     2132   112  112\n","Windbreaker               35     2085   109  109\n","Wool                      35     1975   111  111"],"text/html":["\n","  <div id=\"df-424cd056-7ace-4568-be48-da88405b992c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","\n","    .dataframe thead tr:last-of-type th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th></th>\n","      <th>product_id</th>\n","      <th>quantity</th>\n","      <th colspan=\"2\" halign=\"left\">price</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th>nunique</th>\n","      <th>sum</th>\n","      <th>min</th>\n","      <th>max</th>\n","    </tr>\n","    <tr>\n","      <th>product_name</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Bomber</th>\n","      <td>35</td>\n","      <td>2083</td>\n","      <td>90</td>\n","      <td>90</td>\n","    </tr>\n","    <tr>\n","      <th>Camp Collared</th>\n","      <td>35</td>\n","      <td>2071</td>\n","      <td>112</td>\n","      <td>112</td>\n","    </tr>\n","    <tr>\n","      <th>Cardigan</th>\n","      <td>35</td>\n","      <td>2032</td>\n","      <td>118</td>\n","      <td>118</td>\n","    </tr>\n","    <tr>\n","      <th>Cargo Pants</th>\n","      <td>35</td>\n","      <td>2146</td>\n","      <td>106</td>\n","      <td>106</td>\n","    </tr>\n","    <tr>\n","      <th>Casual Slim Fit</th>\n","      <td>35</td>\n","      <td>2086</td>\n","      <td>113</td>\n","      <td>113</td>\n","    </tr>\n","    <tr>\n","      <th>Chambray</th>\n","      <td>35</td>\n","      <td>2020</td>\n","      <td>105</td>\n","      <td>105</td>\n","    </tr>\n","    <tr>\n","      <th>Chinos</th>\n","      <td>35</td>\n","      <td>2101</td>\n","      <td>100</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>Coach</th>\n","      <td>35</td>\n","      <td>2158</td>\n","      <td>115</td>\n","      <td>115</td>\n","    </tr>\n","    <tr>\n","      <th>Cords</th>\n","      <td>35</td>\n","      <td>2260</td>\n","      <td>113</td>\n","      <td>113</td>\n","    </tr>\n","    <tr>\n","      <th>Cropped</th>\n","      <td>35</td>\n","      <td>2085</td>\n","      <td>99</td>\n","      <td>99</td>\n","    </tr>\n","    <tr>\n","      <th>Cuban Collar</th>\n","      <td>35</td>\n","      <td>2017</td>\n","      <td>93</td>\n","      <td>93</td>\n","    </tr>\n","    <tr>\n","      <th>Denim</th>\n","      <td>70</td>\n","      <td>4204</td>\n","      <td>92</td>\n","      <td>115</td>\n","    </tr>\n","    <tr>\n","      <th>Drawstring</th>\n","      <td>35</td>\n","      <td>2042</td>\n","      <td>104</td>\n","      <td>104</td>\n","    </tr>\n","    <tr>\n","      <th>Dress</th>\n","      <td>35</td>\n","      <td>2125</td>\n","      <td>119</td>\n","      <td>119</td>\n","    </tr>\n","    <tr>\n","      <th>Flannel</th>\n","      <td>35</td>\n","      <td>2135</td>\n","      <td>96</td>\n","      <td>96</td>\n","    </tr>\n","    <tr>\n","      <th>Henley</th>\n","      <td>35</td>\n","      <td>2051</td>\n","      <td>92</td>\n","      <td>92</td>\n","    </tr>\n","    <tr>\n","      <th>High-Waisted</th>\n","      <td>35</td>\n","      <td>2198</td>\n","      <td>98</td>\n","      <td>98</td>\n","    </tr>\n","    <tr>\n","      <th>Joggers</th>\n","      <td>35</td>\n","      <td>2107</td>\n","      <td>94</td>\n","      <td>94</td>\n","    </tr>\n","    <tr>\n","      <th>Leather</th>\n","      <td>35</td>\n","      <td>2276</td>\n","      <td>113</td>\n","      <td>113</td>\n","    </tr>\n","    <tr>\n","      <th>Linen</th>\n","      <td>35</td>\n","      <td>2138</td>\n","      <td>116</td>\n","      <td>116</td>\n","    </tr>\n","    <tr>\n","      <th>Mandarin Collar</th>\n","      <td>35</td>\n","      <td>2203</td>\n","      <td>108</td>\n","      <td>108</td>\n","    </tr>\n","    <tr>\n","      <th>Oxford Cloth</th>\n","      <td>35</td>\n","      <td>2071</td>\n","      <td>114</td>\n","      <td>114</td>\n","    </tr>\n","    <tr>\n","      <th>Parka</th>\n","      <td>35</td>\n","      <td>2201</td>\n","      <td>119</td>\n","      <td>119</td>\n","    </tr>\n","    <tr>\n","      <th>Peacoat</th>\n","      <td>35</td>\n","      <td>2067</td>\n","      <td>102</td>\n","      <td>102</td>\n","    </tr>\n","    <tr>\n","      <th>Pleated</th>\n","      <td>35</td>\n","      <td>2030</td>\n","      <td>90</td>\n","      <td>90</td>\n","    </tr>\n","    <tr>\n","      <th>Polo</th>\n","      <td>35</td>\n","      <td>2196</td>\n","      <td>117</td>\n","      <td>117</td>\n","    </tr>\n","    <tr>\n","      <th>Puffer</th>\n","      <td>35</td>\n","      <td>1946</td>\n","      <td>110</td>\n","      <td>110</td>\n","    </tr>\n","    <tr>\n","      <th>Pullover</th>\n","      <td>35</td>\n","      <td>2184</td>\n","      <td>114</td>\n","      <td>114</td>\n","    </tr>\n","    <tr>\n","      <th>Relaxed Leg</th>\n","      <td>35</td>\n","      <td>2002</td>\n","      <td>95</td>\n","      <td>95</td>\n","    </tr>\n","    <tr>\n","      <th>Shearling</th>\n","      <td>35</td>\n","      <td>2169</td>\n","      <td>95</td>\n","      <td>95</td>\n","    </tr>\n","    <tr>\n","      <th>Slim-Fit</th>\n","      <td>35</td>\n","      <td>2155</td>\n","      <td>119</td>\n","      <td>119</td>\n","    </tr>\n","    <tr>\n","      <th>Tracksuit Bottoms</th>\n","      <td>35</td>\n","      <td>2038</td>\n","      <td>91</td>\n","      <td>91</td>\n","    </tr>\n","    <tr>\n","      <th>Trench Coat</th>\n","      <td>35</td>\n","      <td>2132</td>\n","      <td>112</td>\n","      <td>112</td>\n","    </tr>\n","    <tr>\n","      <th>Windbreaker</th>\n","      <td>35</td>\n","      <td>2085</td>\n","      <td>109</td>\n","      <td>109</td>\n","    </tr>\n","    <tr>\n","      <th>Wool</th>\n","      <td>35</td>\n","      <td>1975</td>\n","      <td>111</td>\n","      <td>111</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-424cd056-7ace-4568-be48-da88405b992c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-424cd056-7ace-4568-be48-da88405b992c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-424cd056-7ace-4568-be48-da88405b992c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e62a651c-5dc2-4741-bb0c-19d13aee3acf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e62a651c-5dc2-4741-bb0c-19d13aee3acf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e62a651c-5dc2-4741-bb0c-19d13aee3acf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"})\",\n  \"rows\": 35,\n  \"fields\": [\n    {\n      \"column\": [\n        \"product_name\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"Puffer\",\n          \"Dress\",\n          \"Pleated\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"product_id\",\n        \"nunique\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 35,\n        \"max\": 70,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          70,\n          35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"quantity\",\n        \"sum\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 363,\n        \"min\": 1946,\n        \"max\": 4204,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          2132,\n          2051\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"min\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 90,\n        \"max\": 119,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          99,\n          116\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"price\",\n        \"max\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 90,\n        \"max\": 119,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          99,\n          116\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["sales_products_df = pd.merge(\n","    left=sales_df,\n","    right=product_df,\n","    how=\"left\",\n","    left_on=\"product_id\",\n","    right_on=\"product_id\"\n",")\n","\n","sales_products_df.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":504},"id":"arUlHzOu89vc","executionInfo":{"status":"ok","timestamp":1734955903761,"user_tz":-420,"elapsed":196,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"b7c8f32e-f648-4ec6-db99-e4d987776027"},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   sales_id  order_id  product_id  price_per_unit  quantity_x  total_price  \\\n","0         0         1         218             106           2          212   \n","1         1         1         481             118           1          118   \n","2         2         1           2              96           3          288   \n","3         3         1        1002             106           2          212   \n","4         4         1         691             113           3          339   \n","\n","  product_type  product_name size  colour  price  quantity_y  \\\n","0        Shirt      Chambray    L  orange    105          44   \n","1       Jacket        Puffer    S  indigo    110          62   \n","2        Shirt  Oxford Cloth    M     red    114          54   \n","3     Trousers          Wool    M    blue    111          52   \n","4       Jacket         Parka    S  indigo    119          53   \n","\n","                                   description  \n","0   A orange coloured, L sized, Chambray Shirt  \n","1    A indigo coloured, S sized, Puffer Jacket  \n","2  A red coloured, M sized, Oxford Cloth Shirt  \n","3      A blue coloured, M sized, Wool Trousers  \n","4     A indigo coloured, S sized, Parka Jacket  "],"text/html":["\n","  <div id=\"df-f4377403-c993-48c4-8742-7d0f2e3e496c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sales_id</th>\n","      <th>order_id</th>\n","      <th>product_id</th>\n","      <th>price_per_unit</th>\n","      <th>quantity_x</th>\n","      <th>total_price</th>\n","      <th>product_type</th>\n","      <th>product_name</th>\n","      <th>size</th>\n","      <th>colour</th>\n","      <th>price</th>\n","      <th>quantity_y</th>\n","      <th>description</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>218</td>\n","      <td>106</td>\n","      <td>2</td>\n","      <td>212</td>\n","      <td>Shirt</td>\n","      <td>Chambray</td>\n","      <td>L</td>\n","      <td>orange</td>\n","      <td>105</td>\n","      <td>44</td>\n","      <td>A orange coloured, L sized, Chambray Shirt</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>481</td>\n","      <td>118</td>\n","      <td>1</td>\n","      <td>118</td>\n","      <td>Jacket</td>\n","      <td>Puffer</td>\n","      <td>S</td>\n","      <td>indigo</td>\n","      <td>110</td>\n","      <td>62</td>\n","      <td>A indigo coloured, S sized, Puffer Jacket</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>96</td>\n","      <td>3</td>\n","      <td>288</td>\n","      <td>Shirt</td>\n","      <td>Oxford Cloth</td>\n","      <td>M</td>\n","      <td>red</td>\n","      <td>114</td>\n","      <td>54</td>\n","      <td>A red coloured, M sized, Oxford Cloth Shirt</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1002</td>\n","      <td>106</td>\n","      <td>2</td>\n","      <td>212</td>\n","      <td>Trousers</td>\n","      <td>Wool</td>\n","      <td>M</td>\n","      <td>blue</td>\n","      <td>111</td>\n","      <td>52</td>\n","      <td>A blue coloured, M sized, Wool Trousers</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>691</td>\n","      <td>113</td>\n","      <td>3</td>\n","      <td>339</td>\n","      <td>Jacket</td>\n","      <td>Parka</td>\n","      <td>S</td>\n","      <td>indigo</td>\n","      <td>119</td>\n","      <td>53</td>\n","      <td>A indigo coloured, S sized, Parka Jacket</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f4377403-c993-48c4-8742-7d0f2e3e496c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f4377403-c993-48c4-8742-7d0f2e3e496c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f4377403-c993-48c4-8742-7d0f2e3e496c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-681673ce-346e-44f4-92c2-e164c32ad25c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-681673ce-346e-44f4-92c2-e164c32ad25c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-681673ce-346e-44f4-92c2-e164c32ad25c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"sales_products_df","summary":"{\n  \"name\": \"sales_products_df\",\n  \"rows\": 5000,\n  \"fields\": [\n    {\n      \"column\": \"sales_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1443,\n        \"min\": 0,\n        \"max\": 4999,\n        \"num_unique_values\": 5000,\n        \"samples\": [\n          1501,\n          2586,\n          2653\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"order_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 285,\n        \"min\": 1,\n        \"max\": 999,\n        \"num_unique_values\": 993,\n        \"samples\": [\n          925,\n          528,\n          571\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 363,\n        \"min\": 1,\n        \"max\": 1259,\n        \"num_unique_values\": 1233,\n        \"samples\": [\n          458,\n          630,\n          806\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price_per_unit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 90,\n        \"max\": 119,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          119,\n          90,\n          106\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quantity_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 86,\n        \"min\": 90,\n        \"max\": 357,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          106,\n          212,\n          115\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Shirt\",\n          \"Jacket\",\n          \"Trousers\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"product_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"Cuban Collar\",\n          \"Shearling\",\n          \"Flannel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"size\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"S\",\n          \"l\",\n          \"L\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"colour\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"orange\",\n          \"indigo\",\n          \"violet\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 90,\n        \"max\": 119,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          116,\n          94,\n          105\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quantity_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 40,\n        \"max\": 80,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          76,\n          56,\n          78\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1233,\n        \"samples\": [\n          \"A red coloured, L sized, Puffer Jacket\",\n          \"A red coloured, XS sized, Coach Jacket\",\n          \"A red coloured, S sized, Shearling Jacket\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["sales_products_df.groupby(by=\"product_type\").agg({\n","    \"sales_id\": \"nunique\",\n","    \"quantity_x\": \"sum\",\n","    \"total_price\": \"sum\"\n","})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"id":"ta-zg8Be9cnf","executionInfo":{"status":"ok","timestamp":1734955903762,"user_tz":-420,"elapsed":194,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"e4a3bb12-9b2f-4052-8c1d-97dfcb15345e"},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              sales_id  quantity_x  total_price\n","product_type                                   \n","Jacket            1676        3343       357026\n","Shirt             1641        3259       333600\n","Trousers          1683        3360       341174"],"text/html":["\n","  <div id=\"df-ff1808c6-911e-4895-9600-454ff427a22c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sales_id</th>\n","      <th>quantity_x</th>\n","      <th>total_price</th>\n","    </tr>\n","    <tr>\n","      <th>product_type</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Jacket</th>\n","      <td>1676</td>\n","      <td>3343</td>\n","      <td>357026</td>\n","    </tr>\n","    <tr>\n","      <th>Shirt</th>\n","      <td>1641</td>\n","      <td>3259</td>\n","      <td>333600</td>\n","    </tr>\n","    <tr>\n","      <th>Trousers</th>\n","      <td>1683</td>\n","      <td>3360</td>\n","      <td>341174</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff1808c6-911e-4895-9600-454ff427a22c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ff1808c6-911e-4895-9600-454ff427a22c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ff1808c6-911e-4895-9600-454ff427a22c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6574a99f-e7f7-46ff-9847-876a5e106364\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6574a99f-e7f7-46ff-9847-876a5e106364')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6574a99f-e7f7-46ff-9847-876a5e106364 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"})\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"product_type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Jacket\",\n          \"Shirt\",\n          \"Trousers\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sales_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22,\n        \"min\": 1641,\n        \"max\": 1683,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1676,\n          1641,\n          1683\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quantity_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54,\n        \"min\": 3259,\n        \"max\": 3360,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3343,\n          3259,\n          3360\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11954,\n        \"min\": 333600,\n        \"max\": 357026,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          357026,\n          333600,\n          341174\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["sales_products_df.groupby(by=\"product_name\").agg({\n","    \"sales_id\": \"nunique\",\n","    \"quantity_x\": \"sum\",\n","    \"total_price\": \"sum\"\n","}).sort_values(by=\"total_price\", ascending=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"PxGql9Mm9pGM","executionInfo":{"status":"ok","timestamp":1734955903763,"user_tz":-420,"elapsed":185,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"069a10b4-4d9f-42e6-e73d-ff47a682add0"},"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                   sales_id  quantity_x  total_price\n","product_name                                        \n","Denim                   273         527        52399\n","Casual Slim Fit         154         306        36414\n","Trench Coat             146         299        35581\n","Shearling               150         302        35334\n","Puffer                  140         298        35164\n","Flannel                 141         281        33158\n","Cropped                 135         284        32660\n","Pleated                 147         308        32340\n","Joggers                 164         334        31062\n","Chambray                141         290        30740\n","Parka                   134         269        30397\n","Bomber                  150         297        29700\n","Chinos                  135         260        29380\n","Windbreaker             143         287        29274\n","Cardigan                134         260        29120\n","Peacoat                 132         266        28994\n","Tracksuit Bottoms       130         257        28784\n","Slim-Fit                154         288        27936\n","Oxford Cloth            146         289        27744\n","Drawstring              147         288        27648\n","High-Waisted            140         278        27522\n","Camp Collared           139         279        27342\n","Cargo Pants             134         267        27234\n","Relaxed Leg             146         301        27090\n","Cuban Collar            122         254        26670\n","Henley                  146         281        26414\n","Wool                    125         249        26394\n","Leather                 136         263        25774\n","Mandarin Collar         124         236        25724\n","Dress                   127         243        25272\n","Pullover                143         276        25116\n","Polo                    131         264        25080\n","Coach                   134         265        24645\n","Linen                   131         270        24570\n","Cords                   126         246        23124"],"text/html":["\n","  <div id=\"df-731d48d7-796a-4d0d-a075-cc0947087257\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sales_id</th>\n","      <th>quantity_x</th>\n","      <th>total_price</th>\n","    </tr>\n","    <tr>\n","      <th>product_name</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Denim</th>\n","      <td>273</td>\n","      <td>527</td>\n","      <td>52399</td>\n","    </tr>\n","    <tr>\n","      <th>Casual Slim Fit</th>\n","      <td>154</td>\n","      <td>306</td>\n","      <td>36414</td>\n","    </tr>\n","    <tr>\n","      <th>Trench Coat</th>\n","      <td>146</td>\n","      <td>299</td>\n","      <td>35581</td>\n","    </tr>\n","    <tr>\n","      <th>Shearling</th>\n","      <td>150</td>\n","      <td>302</td>\n","      <td>35334</td>\n","    </tr>\n","    <tr>\n","      <th>Puffer</th>\n","      <td>140</td>\n","      <td>298</td>\n","      <td>35164</td>\n","    </tr>\n","    <tr>\n","      <th>Flannel</th>\n","      <td>141</td>\n","      <td>281</td>\n","      <td>33158</td>\n","    </tr>\n","    <tr>\n","      <th>Cropped</th>\n","      <td>135</td>\n","      <td>284</td>\n","      <td>32660</td>\n","    </tr>\n","    <tr>\n","      <th>Pleated</th>\n","      <td>147</td>\n","      <td>308</td>\n","      <td>32340</td>\n","    </tr>\n","    <tr>\n","      <th>Joggers</th>\n","      <td>164</td>\n","      <td>334</td>\n","      <td>31062</td>\n","    </tr>\n","    <tr>\n","      <th>Chambray</th>\n","      <td>141</td>\n","      <td>290</td>\n","      <td>30740</td>\n","    </tr>\n","    <tr>\n","      <th>Parka</th>\n","      <td>134</td>\n","      <td>269</td>\n","      <td>30397</td>\n","    </tr>\n","    <tr>\n","      <th>Bomber</th>\n","      <td>150</td>\n","      <td>297</td>\n","      <td>29700</td>\n","    </tr>\n","    <tr>\n","      <th>Chinos</th>\n","      <td>135</td>\n","      <td>260</td>\n","      <td>29380</td>\n","    </tr>\n","    <tr>\n","      <th>Windbreaker</th>\n","      <td>143</td>\n","      <td>287</td>\n","      <td>29274</td>\n","    </tr>\n","    <tr>\n","      <th>Cardigan</th>\n","      <td>134</td>\n","      <td>260</td>\n","      <td>29120</td>\n","    </tr>\n","    <tr>\n","      <th>Peacoat</th>\n","      <td>132</td>\n","      <td>266</td>\n","      <td>28994</td>\n","    </tr>\n","    <tr>\n","      <th>Tracksuit Bottoms</th>\n","      <td>130</td>\n","      <td>257</td>\n","      <td>28784</td>\n","    </tr>\n","    <tr>\n","      <th>Slim-Fit</th>\n","      <td>154</td>\n","      <td>288</td>\n","      <td>27936</td>\n","    </tr>\n","    <tr>\n","      <th>Oxford Cloth</th>\n","      <td>146</td>\n","      <td>289</td>\n","      <td>27744</td>\n","    </tr>\n","    <tr>\n","      <th>Drawstring</th>\n","      <td>147</td>\n","      <td>288</td>\n","      <td>27648</td>\n","    </tr>\n","    <tr>\n","      <th>High-Waisted</th>\n","      <td>140</td>\n","      <td>278</td>\n","      <td>27522</td>\n","    </tr>\n","    <tr>\n","      <th>Camp Collared</th>\n","      <td>139</td>\n","      <td>279</td>\n","      <td>27342</td>\n","    </tr>\n","    <tr>\n","      <th>Cargo Pants</th>\n","      <td>134</td>\n","      <td>267</td>\n","      <td>27234</td>\n","    </tr>\n","    <tr>\n","      <th>Relaxed Leg</th>\n","      <td>146</td>\n","      <td>301</td>\n","      <td>27090</td>\n","    </tr>\n","    <tr>\n","      <th>Cuban Collar</th>\n","      <td>122</td>\n","      <td>254</td>\n","      <td>26670</td>\n","    </tr>\n","    <tr>\n","      <th>Henley</th>\n","      <td>146</td>\n","      <td>281</td>\n","      <td>26414</td>\n","    </tr>\n","    <tr>\n","      <th>Wool</th>\n","      <td>125</td>\n","      <td>249</td>\n","      <td>26394</td>\n","    </tr>\n","    <tr>\n","      <th>Leather</th>\n","      <td>136</td>\n","      <td>263</td>\n","      <td>25774</td>\n","    </tr>\n","    <tr>\n","      <th>Mandarin Collar</th>\n","      <td>124</td>\n","      <td>236</td>\n","      <td>25724</td>\n","    </tr>\n","    <tr>\n","      <th>Dress</th>\n","      <td>127</td>\n","      <td>243</td>\n","      <td>25272</td>\n","    </tr>\n","    <tr>\n","      <th>Pullover</th>\n","      <td>143</td>\n","      <td>276</td>\n","      <td>25116</td>\n","    </tr>\n","    <tr>\n","      <th>Polo</th>\n","      <td>131</td>\n","      <td>264</td>\n","      <td>25080</td>\n","    </tr>\n","    <tr>\n","      <th>Coach</th>\n","      <td>134</td>\n","      <td>265</td>\n","      <td>24645</td>\n","    </tr>\n","    <tr>\n","      <th>Linen</th>\n","      <td>131</td>\n","      <td>270</td>\n","      <td>24570</td>\n","    </tr>\n","    <tr>\n","      <th>Cords</th>\n","      <td>126</td>\n","      <td>246</td>\n","      <td>23124</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-731d48d7-796a-4d0d-a075-cc0947087257')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-731d48d7-796a-4d0d-a075-cc0947087257 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-731d48d7-796a-4d0d-a075-cc0947087257');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-64b4345a-a211-47b2-bf46-2917664dbbcd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-64b4345a-a211-47b2-bf46-2917664dbbcd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-64b4345a-a211-47b2-bf46-2917664dbbcd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"})\",\n  \"rows\": 35,\n  \"fields\": [\n    {\n      \"column\": \"product_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"Wool\",\n          \"Windbreaker\",\n          \"Cuban Collar\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sales_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 122,\n        \"max\": 273,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          273,\n          124,\n          125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quantity_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47,\n        \"min\": 236,\n        \"max\": 527,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          265,\n          257,\n          263\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5262,\n        \"min\": 23124,\n        \"max\": 52399,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          26394,\n          29274,\n          26670\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["all_df = pd.merge(\n","    left=sales_products_df,\n","    right=orders_customers_df,\n","    how=\"left\",\n","    left_on=\"order_id\",\n","    right_on=\"order_id\"\n",")\n","\n","all_df.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"id":"5mnQghDT-EZm","executionInfo":{"status":"ok","timestamp":1734955903763,"user_tz":-420,"elapsed":181,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"44ec7cb6-67c3-4165-a901-81a40c298664"},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   sales_id  order_id  product_id  price_per_unit  quantity_x  total_price  \\\n","0         0         1         218             106           2          212   \n","1         1         1         481             118           1          118   \n","2         2         1           2              96           3          288   \n","3         3         1        1002             106           2          212   \n","4         4         1         691             113           3          339   \n","\n","  product_type  product_name size  colour  ...  customer_name  \\\n","0        Shirt      Chambray    L  orange  ...       fulan 64   \n","1       Jacket        Puffer    S  indigo  ...       fulan 64   \n","2        Shirt  Oxford Cloth    M     red  ...       fulan 64   \n","3     Trousers          Wool    M    blue  ...       fulan 64   \n","4       Jacket         Parka    S  indigo  ...       fulan 64   \n","\n","              gender age               home_address  zip_code            city  \\\n","0  Prefer not to say  75  4927 Alice MeadowApt. 960      7787  Sanfordborough   \n","1  Prefer not to say  75  4927 Alice MeadowApt. 960      7787  Sanfordborough   \n","2  Prefer not to say  75  4927 Alice MeadowApt. 960      7787  Sanfordborough   \n","3  Prefer not to say  75  4927 Alice MeadowApt. 960      7787  Sanfordborough   \n","4  Prefer not to say  75  4927 Alice MeadowApt. 960      7787  Sanfordborough   \n","\n","             state    country  status age_group  \n","0  South Australia  Australia  Active   Seniors  \n","1  South Australia  Australia  Active   Seniors  \n","2  South Australia  Australia  Active   Seniors  \n","3  South Australia  Australia  Active   Seniors  \n","4  South Australia  Australia  Active   Seniors  \n","\n","[5 rows x 28 columns]"],"text/html":["\n","  <div id=\"df-37ea5a76-7fd4-4c71-a441-f412c9121ba5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sales_id</th>\n","      <th>order_id</th>\n","      <th>product_id</th>\n","      <th>price_per_unit</th>\n","      <th>quantity_x</th>\n","      <th>total_price</th>\n","      <th>product_type</th>\n","      <th>product_name</th>\n","      <th>size</th>\n","      <th>colour</th>\n","      <th>...</th>\n","      <th>customer_name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>home_address</th>\n","      <th>zip_code</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>country</th>\n","      <th>status</th>\n","      <th>age_group</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>218</td>\n","      <td>106</td>\n","      <td>2</td>\n","      <td>212</td>\n","      <td>Shirt</td>\n","      <td>Chambray</td>\n","      <td>L</td>\n","      <td>orange</td>\n","      <td>...</td>\n","      <td>fulan 64</td>\n","      <td>Prefer not to say</td>\n","      <td>75</td>\n","      <td>4927 Alice MeadowApt. 960</td>\n","      <td>7787</td>\n","      <td>Sanfordborough</td>\n","      <td>South Australia</td>\n","      <td>Australia</td>\n","      <td>Active</td>\n","      <td>Seniors</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>481</td>\n","      <td>118</td>\n","      <td>1</td>\n","      <td>118</td>\n","      <td>Jacket</td>\n","      <td>Puffer</td>\n","      <td>S</td>\n","      <td>indigo</td>\n","      <td>...</td>\n","      <td>fulan 64</td>\n","      <td>Prefer not to say</td>\n","      <td>75</td>\n","      <td>4927 Alice MeadowApt. 960</td>\n","      <td>7787</td>\n","      <td>Sanfordborough</td>\n","      <td>South Australia</td>\n","      <td>Australia</td>\n","      <td>Active</td>\n","      <td>Seniors</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>96</td>\n","      <td>3</td>\n","      <td>288</td>\n","      <td>Shirt</td>\n","      <td>Oxford Cloth</td>\n","      <td>M</td>\n","      <td>red</td>\n","      <td>...</td>\n","      <td>fulan 64</td>\n","      <td>Prefer not to say</td>\n","      <td>75</td>\n","      <td>4927 Alice MeadowApt. 960</td>\n","      <td>7787</td>\n","      <td>Sanfordborough</td>\n","      <td>South Australia</td>\n","      <td>Australia</td>\n","      <td>Active</td>\n","      <td>Seniors</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1002</td>\n","      <td>106</td>\n","      <td>2</td>\n","      <td>212</td>\n","      <td>Trousers</td>\n","      <td>Wool</td>\n","      <td>M</td>\n","      <td>blue</td>\n","      <td>...</td>\n","      <td>fulan 64</td>\n","      <td>Prefer not to say</td>\n","      <td>75</td>\n","      <td>4927 Alice MeadowApt. 960</td>\n","      <td>7787</td>\n","      <td>Sanfordborough</td>\n","      <td>South Australia</td>\n","      <td>Australia</td>\n","      <td>Active</td>\n","      <td>Seniors</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>691</td>\n","      <td>113</td>\n","      <td>3</td>\n","      <td>339</td>\n","      <td>Jacket</td>\n","      <td>Parka</td>\n","      <td>S</td>\n","      <td>indigo</td>\n","      <td>...</td>\n","      <td>fulan 64</td>\n","      <td>Prefer not to say</td>\n","      <td>75</td>\n","      <td>4927 Alice MeadowApt. 960</td>\n","      <td>7787</td>\n","      <td>Sanfordborough</td>\n","      <td>South Australia</td>\n","      <td>Australia</td>\n","      <td>Active</td>\n","      <td>Seniors</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 28 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-37ea5a76-7fd4-4c71-a441-f412c9121ba5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-37ea5a76-7fd4-4c71-a441-f412c9121ba5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-37ea5a76-7fd4-4c71-a441-f412c9121ba5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-93f18cba-89a3-4cec-94a8-cfbc6833f27e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-93f18cba-89a3-4cec-94a8-cfbc6833f27e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-93f18cba-89a3-4cec-94a8-cfbc6833f27e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"all_df"}},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["all_df.groupby(by=[\"state\", \"product_type\"]).agg({\n","    \"quantity_x\": \"sum\",\n","    \"total_price\": \"sum\"\n","})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":833},"id":"O5jMPBEY-X8l","executionInfo":{"status":"ok","timestamp":1734955903764,"user_tz":-420,"elapsed":172,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"c2b79cab-d6fb-4e10-a769-b19affa6d906"},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                           quantity_x  total_price\n","state                        product_type                         \n","Australian Capital Territory Jacket               406        43204\n","                             Shirt                396        40448\n","                             Trousers             454        46790\n","New South Wales              Jacket               451        47998\n","                             Shirt                431        43980\n","                             Trousers             392        39766\n","Northern Territory           Jacket               365        38991\n","                             Shirt                336        33865\n","                             Trousers             384        38998\n","Queensland                   Jacket               499        53511\n","                             Shirt                417        42506\n","                             Trousers             453        46045\n","South Australia              Jacket               461        49090\n","                             Shirt                509        52685\n","                             Trousers             455        46041\n","Tasmania                     Jacket               412        44370\n","                             Shirt                387        39668\n","                             Trousers             379        38057\n","Victoria                     Jacket               359        38203\n","                             Shirt                390        40206\n","                             Trousers             414        41948\n","Western Australia            Jacket               390        41659\n","                             Shirt                393        40242\n","                             Trousers             429        43529"],"text/html":["\n","  <div id=\"df-387ac001-3f91-4ed8-8ec9-76cca0447be6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>quantity_x</th>\n","      <th>total_price</th>\n","    </tr>\n","    <tr>\n","      <th>state</th>\n","      <th>product_type</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">Australian Capital Territory</th>\n","      <th>Jacket</th>\n","      <td>406</td>\n","      <td>43204</td>\n","    </tr>\n","    <tr>\n","      <th>Shirt</th>\n","      <td>396</td>\n","      <td>40448</td>\n","    </tr>\n","    <tr>\n","      <th>Trousers</th>\n","      <td>454</td>\n","      <td>46790</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">New South Wales</th>\n","      <th>Jacket</th>\n","      <td>451</td>\n","      <td>47998</td>\n","    </tr>\n","    <tr>\n","      <th>Shirt</th>\n","      <td>431</td>\n","      <td>43980</td>\n","    </tr>\n","    <tr>\n","      <th>Trousers</th>\n","      <td>392</td>\n","      <td>39766</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">Northern Territory</th>\n","      <th>Jacket</th>\n","      <td>365</td>\n","      <td>38991</td>\n","    </tr>\n","    <tr>\n","      <th>Shirt</th>\n","      <td>336</td>\n","      <td>33865</td>\n","    </tr>\n","    <tr>\n","      <th>Trousers</th>\n","      <td>384</td>\n","      <td>38998</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">Queensland</th>\n","      <th>Jacket</th>\n","      <td>499</td>\n","      <td>53511</td>\n","    </tr>\n","    <tr>\n","      <th>Shirt</th>\n","      <td>417</td>\n","      <td>42506</td>\n","    </tr>\n","    <tr>\n","      <th>Trousers</th>\n","      <td>453</td>\n","      <td>46045</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">South Australia</th>\n","      <th>Jacket</th>\n","      <td>461</td>\n","      <td>49090</td>\n","    </tr>\n","    <tr>\n","      <th>Shirt</th>\n","      <td>509</td>\n","      <td>52685</td>\n","    </tr>\n","    <tr>\n","      <th>Trousers</th>\n","      <td>455</td>\n","      <td>46041</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">Tasmania</th>\n","      <th>Jacket</th>\n","      <td>412</td>\n","      <td>44370</td>\n","    </tr>\n","    <tr>\n","      <th>Shirt</th>\n","      <td>387</td>\n","      <td>39668</td>\n","    </tr>\n","    <tr>\n","      <th>Trousers</th>\n","      <td>379</td>\n","      <td>38057</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">Victoria</th>\n","      <th>Jacket</th>\n","      <td>359</td>\n","      <td>38203</td>\n","    </tr>\n","    <tr>\n","      <th>Shirt</th>\n","      <td>390</td>\n","      <td>40206</td>\n","    </tr>\n","    <tr>\n","      <th>Trousers</th>\n","      <td>414</td>\n","      <td>41948</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">Western Australia</th>\n","      <th>Jacket</th>\n","      <td>390</td>\n","      <td>41659</td>\n","    </tr>\n","    <tr>\n","      <th>Shirt</th>\n","      <td>393</td>\n","      <td>40242</td>\n","    </tr>\n","    <tr>\n","      <th>Trousers</th>\n","      <td>429</td>\n","      <td>43529</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-387ac001-3f91-4ed8-8ec9-76cca0447be6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-387ac001-3f91-4ed8-8ec9-76cca0447be6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-387ac001-3f91-4ed8-8ec9-76cca0447be6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-dc796e2d-1c11-4b9e-a93a-9e2f3b2ce2ed\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dc796e2d-1c11-4b9e-a93a-9e2f3b2ce2ed')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-dc796e2d-1c11-4b9e-a93a-9e2f3b2ce2ed button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"})\",\n  \"rows\": 24,\n  \"fields\": [\n    {\n      \"column\": \"quantity_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42,\n        \"min\": 336,\n        \"max\": 509,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          412,\n          499,\n          406\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4718,\n        \"min\": 33865,\n        \"max\": 53511,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          38998,\n          39668,\n          43204\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["all_df.groupby(by=[\"gender\", \"product_type\"]).agg({\n","    \"quantity_x\": \"sum\",\n","    \"total_price\": \"sum\"\n","})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"vLWvYYTJ-xbl","executionInfo":{"status":"ok","timestamp":1734955903765,"user_tz":-420,"elapsed":169,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"ff854489-57ba-47aa-fcdf-d8d7df1db65b"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                quantity_x  total_price\n","gender            product_type                         \n","Female            Jacket               481        50963\n","                  Shirt                445        45146\n","                  Trousers             481        49295\n","Male              Jacket               480        50978\n","                  Shirt                410        41939\n","                  Trousers             453        46071\n","Prefer not to say Jacket              2382       255085\n","                  Shirt               2404       246515\n","                  Trousers            2426       245808"],"text/html":["\n","  <div id=\"df-53d742bf-34eb-455b-968e-5bd6f0eefd1e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>quantity_x</th>\n","      <th>total_price</th>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <th>product_type</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">Female</th>\n","      <th>Jacket</th>\n","      <td>481</td>\n","      <td>50963</td>\n","    </tr>\n","    <tr>\n","      <th>Shirt</th>\n","      <td>445</td>\n","      <td>45146</td>\n","    </tr>\n","    <tr>\n","      <th>Trousers</th>\n","      <td>481</td>\n","      <td>49295</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">Male</th>\n","      <th>Jacket</th>\n","      <td>480</td>\n","      <td>50978</td>\n","    </tr>\n","    <tr>\n","      <th>Shirt</th>\n","      <td>410</td>\n","      <td>41939</td>\n","    </tr>\n","    <tr>\n","      <th>Trousers</th>\n","      <td>453</td>\n","      <td>46071</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">Prefer not to say</th>\n","      <th>Jacket</th>\n","      <td>2382</td>\n","      <td>255085</td>\n","    </tr>\n","    <tr>\n","      <th>Shirt</th>\n","      <td>2404</td>\n","      <td>246515</td>\n","    </tr>\n","    <tr>\n","      <th>Trousers</th>\n","      <td>2426</td>\n","      <td>245808</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-53d742bf-34eb-455b-968e-5bd6f0eefd1e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-53d742bf-34eb-455b-968e-5bd6f0eefd1e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-53d742bf-34eb-455b-968e-5bd6f0eefd1e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-008f2b23-860b-4d96-a2ef-85ca963dabfe\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-008f2b23-860b-4d96-a2ef-85ca963dabfe')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-008f2b23-860b-4d96-a2ef-85ca963dabfe button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"})\",\n  \"rows\": 9,\n  \"fields\": [\n    {\n      \"column\": \"quantity_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 973,\n        \"min\": 410,\n        \"max\": 2426,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          445,\n          2382,\n          481\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 100942,\n        \"min\": 41939,\n        \"max\": 255085,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          246515,\n          45146,\n          46071\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","cities = ('Bogor', 'Bandung', 'Jakarta', 'Semarang', 'Yogyakarta',\n","          'Surakarta','Surabaya', 'Medan', 'Makassar')\n","\n","populations = (45076704, 11626410, 212162757, 19109629, 50819826, 17579085,\n","               3481, 287750, 785409)\n","\n","plt.bar(x=cities, height=populations)\n","plt.xticks(rotation=45)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":495},"id":"fuJVf8aqC277","executionInfo":{"status":"ok","timestamp":1734955903765,"user_tz":-420,"elapsed":164,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"45aef004-30a1-4be8-8cca-17ed00697fbf"},"execution_count":55,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.barh(y=cities, width=populations)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"id":"Avu90L2WDkHB","executionInfo":{"status":"ok","timestamp":1734955907589,"user_tz":-420,"elapsed":3979,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"cdd3c202-2d2a-4d88-e203-5338c89498ec"},"execution_count":56,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.DataFrame({\n","    'Cities': cities,\n","    'Population': populations\n","})\n","\n","df.sort_values(by='Population', inplace=True)\n","\n","plt.barh(y=df['Cities'], width=df['Population'])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"id":"kAxDKtWyDzr3","executionInfo":{"status":"ok","timestamp":1734955907591,"user_tz":-420,"elapsed":128,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"c8666085-2894-4cd3-8cb6-be39dfe73107"},"execution_count":57,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.barh(y=df['Cities'], width=df['Population'])\n","plt.xlabel(\"Populasi (juta)\")\n","plt.ylabel(\"Kota\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"LBxeGqRBEbYd","executionInfo":{"status":"ok","timestamp":1734955907591,"user_tz":-420,"elapsed":123,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"2888a407-6bbc-4018-c3cf-5005228ae9df"},"execution_count":58,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import seaborn as sns\n","\n","sns.barplot(y=df[\"Cities\"], x=df[\"Population\"], orient=\"h\", color='blue')\n","plt.xlabel(\"Populasi (juta)\")\n","plt.ylabel(\"Kota\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"MDpnmVHXEtz_","executionInfo":{"status":"ok","timestamp":1734955909515,"user_tz":-420,"elapsed":2040,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"8b460651-a476-483d-a39d-be947fd79da3"},"execution_count":59,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAm4AAAGwCAYAAAAQdOnRAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABSNklEQVR4nO3deVxOef8/8NdV6WovEoVWLUopRVnGyDYlErMyBlmyTQymQTdRY4ydsd7usVQYssdPYydDGUIREtO0zQgjtKGo8/vD13m4JlJN5urU6/l4XI/bOedzPuf9uU7N9bo/55wrmSAIAoiIiIio1lNRdgFEREREVDkMbkREREQSweBGREREJBEMbkREREQSweBGREREJBEMbkREREQSweBGREREJBFqyi6Aak5ZWRlu374NXV1dyGQyZZdDRERElSAIAgoKCtCsWTOoqFQ8p8bgVofcvn0bpqamyi6DiIiIqiE7OxstWrSosA2DWx2iq6sL4MWJ19PTU3I1REREVBn5+fkwNTUVP8crwuBWh7y8PKqnp8fgRkREJDGVuc2JDycQERERSQSDGxEREZFEMLgRERERSQSDGxEREZFEMLgRERERSQSDGxEREZFEMLgRERERSQSDGxEREZFEMLgRERERSQSDGxEREZFEMLgRERERSQSDGxEREZFEMLgRERERSQSDWyVYWFjghx9+UHYZREREVM9JJrj99ddfGDduHMzMzCCXy2FsbAwvLy/ExcUpuzQiIiKif4WasguorI8++gglJSWIjIyElZUV7t69i+PHjyM3N7da/QmCgNLSUqipSeYtICIionpOEjNujx49wunTp7FgwQJ069YN5ubmcHd3R3BwMPr164eMjAzIZDIkJSUp7COTyRAbGwsAiI2NhUwmw8GDB+Hm5ga5XI4zZ84gLS0Nfn5+aNq0KXR0dNC+fXscO3asXA0FBQUYNGgQtLW10bx5c6xevVph+9KlS+Hk5ARtbW2Ymppi/PjxKCwsBAAUFRVBT08Pu3btUtgnOjoa2traKCgoAABMmzYNtra20NLSgpWVFUJCQvDs2bMafCeJiIhIyiQR3HR0dKCjo4Po6GgUFxf/o76mT5+O+fPnIyUlBW3atEFhYSF8fHxw/PhxJCYmwtvbG76+vsjKylLYb9GiRXB2dkZiYiKmT5+Or776CkePHhW3q6ioYMWKFbh2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GbfS0lKcPn1abOPu7o7u3btj/vz5r+0jNDQUYWFh5dbn5eVBT0+vyu8LERER/fvy8/Ohr69fqc9vtX+pplrJyMgIffr0QUREBARBQJ8+fdC4cWNx+2+//YbHjx+jV69eCvuVlJSIl1NTUlLg4eGhsP3VkAcApaWl+P7777Fjxw78+eefKCkpQXFxMbS0tBTatWnTRmHZxMQE9+7de2P9wcHBmDJliricn58PU1PTSoyciIiIpKheBzfgxeXSwMBAAMDq1asVthUWFgIAYmJi0Lx5c4Vtcrm80sdYtGgRli9fjh9++AFOTk7Q1tbGpEmTUFJSotCuQYMGCssymQxlZWVv7Fcul1epDiIiIpK2eh/cvL29UVJSAplMBi8vL4VtDg4OkMvlyMrKQteuXV+7v729Pfbv36+w7tdff1VYjouLg5+fH7744gsALx54uHnzJhwcHGpwJERERFTX1fvgpqqqipSUFPHfr9LV1UVQUBAmT56MsrIyvPfee8jLy0NcXBz09PQwbNgwjB07FkuWLME333yDUaNG4eLFi4iIiFDox8bGBrt27UJ8fDwaNmyIpUuX4u7duwxuREREVCX1+qnSl/T09N54M+CcOXMQEhKCefPmwd7eHt7e3oiJiYGlpSUAwMzMDLt370Z0dDScnZ2xdu1afP/99wp9zJw5E66urvDy8oKnpyeMjY3Rv3//dz0sIiIiqmPq5VOldVVVnkohIiKi2qEqn9+ccSMiIiKSCAY3IiIiIolgcCMiIiKSCAY3IiIiIolgcCMiIiKSCAY3IiIiIolgcCMiIiKSCAY3IiIiIolgcCMiIiKSCAY3IiIiIolgcCMiIiKSCAY3IiIiIolgcCMiIiKSCAY3IiIiIolgcCMiIiKSCAY3IiIiIolgcCMiIiKSCAa3OsjJKVPZJRAREdE7wOBGREREJBEMbkREREQSweBGREREJBEMbkREREQSweBGREREJBEMbkREREQSweBGREREJBEMbkREREQSweBGREREJBEMbkREREQSweBGREREJBH1MrhlZGRAJpMhKSlJ2aUQERERVZpkgpu/vz9kMhnGjh1bbtuXX34JmUwGf3//f78wIiIion+JZIIbAJiamiIqKgpPnjwR1z19+hRbt26FmZmZEit7t0pKSpRdAhEREdUCkgpurq6uMDU1xZ49e8R1e/bsgZmZGdq2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FkM1IznZ/K3fvExERETSU6XgFh4e/q7qICIiIqK3qNafvCIiIiKifx+DGxEREZFEMLgRERERSQSDGxEREZFEMLgRERERSQSDGxEREZFEMLgRERERSUS1/uQV1W5OTplQUdFVdhlvlZ5uoewSiIiIJIUzbkREREQSweBGREREJBEMbkREREQSweBGREREJBEMbkREREQSweBGREREJBEMbkREREQSweBGREREJBEMbkREREQSweBGREREJBEMbkREREQSUSuD219//YVx48bBzMwMcrkcxsbG8PLyQlxcnLJLIyIiIlKaWvlH5j/66COUlJQgMjISVlZWuHv3Lo4fP47c3Fxll6agtLQUMpkMKiq1Mv8SERFRHVPrEsejR49w+vRpLFiwAN26dYO5uTnc3d0RHByMfv36iW1GjRoFIyMj6OnpoXv37rh8+bLYR2hoKFxcXLBx40aYmZlBR0cH48ePR2lpKRYuXAhjY2M0adIEc+fOVTj20qVL4eTkBG1tbZiammL8+PEoLCwUt0dERMDAwAD79++Hg4MD5HI5srKykJCQgF69eqFx48bQ19dH165dcenSJYW+ZTIZ1q9fjwEDBkBLSws2NjbYv3+/Qpv9+/fDxsYGGhoa6NatGyIjIyGTyfDo0aMafpeJiIhIimpdcNPR0YGOjg6io6NRXFz82jaffPIJ7t27h4MHD+LixYtwdXVFjx498ODBA7FNWloaDh48iEOHDmHbtm3YsGED+vTpgz/++AOnTp3CggULMHPmTJw7d07cR0VFBStWrMC1a9cQGRmJEydOYOrUqQrHfvz4MRYsWID169fj2rVraNKkCQoKCjBs2DCcOXMGv/76K2xsbODj44OCggKFfcPCwvDpp5/iypUr8PHxweDBg8Wa09PT8fHHH6N///64fPkyxowZgxkzZlT4XhUXFyM/P1/hRURERHWXTBAEQdlF/N3u3bsREBCAJ0+ewNXVFV27dsXAgQPRpk0bnDlzBn369MG9e/cgl8vFfaytrTF16lSMHj0aoaGhWLRoEe7cuQNdXV0AgLe3N1JTU5GWliZe2mzVqhX8/f0xffr019axa9cujB07Fvfv3wfwYsZt+PDhSEpKgrOz8xvrLysrg4GBAbZu3Yq+ffsCeDHjNnPmTMyZMwcAUFRUBB0dHRw8eBDe3t6YPn06YmJikJycLPYzc+ZM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/PLLL/jzzz9x//59sb+jR48iPj4eKSkpGDNmDO7evfvPB0tERER1Rr0KbmVlZVBTU4OKigqioqJw8eJFODo6YvLkyVi0aFGF+06aNAlhYWHw8fFBfHw8xowZgw8//BCfffYZPDw8kJubqzD7VpFvv/0WGRkZaNmyJYyMjAAAM2fOhKurK7y8vODp6QljY+Na8WXBREREVHvIBEEQlF3Ev8Xb2xvW1tZYtWqVskt5J/Lz86Gvrw8zsytQUdFVdjlERER1Snq6xTvp9+Xnd15eHvT09CpsWy9m3B4+fIgDBw4gNjYWPXv2VHY5RERERNVSLx5OGDFiBBISEvD111/Dz89P2eUQERERVUu9CG579+5VdglERERE/1i9uFRKREREVBcwuBERERFJBIMbERERkUQwuBERERFJBIMbERERkUQwuBERERFJRL34OpD6JjnZ/K3fvExERETSwxk3IiIiIolgcCMiIiKSCF4qrUMEQQDw4o/VEhERkTS8/Nx++TleEQa3OiQ3NxcAYGpqquRKiIiIqKoKCgqgr69fYRsGtzqkUaNGAICsrKy3nngpys/Ph6mpKbKzs+vkwxd1eXx1eWwAxydldXlsAMcnFYIgoKCgAM2aNXtrWwa3OkRF5cUti/r6+pL+AX4bPT09jk+i6vLYAI5Pyury2ACOTwoqO+HChxOIiIiIJILBjYiIiEgiGNzqELlcjtmzZ0Mulyu7lHeC45Ouujw2gOOTsro8NoDjq4tkQmWePSUiIiIipeOMGxEREZFEMLgRERERSQSDGxEREZFEMLgRERERSQSDWy23evVqWFhYQENDAx4eHjh//nyF7Xfu3IlWrVpBQ0MDTk5O+PnnnxW2C4KAWbNmwcTEBJqamujZsydu3br1LodQoaqMb926dejSpQsaNmyIhg0bomfPnuXa+/v7QyaTKby8vb3f9TBeqypji4iIKFe3hoaGQhspnztPT89y45PJZOjTp4/Ypracu19++QW+vr5o1qwZZDIZoqOj37pPbGwsXF1dIZfLYW1tjYiIiHJtqvq7/K5UdXx79uxBr169YGRkBD09PXTs2BGHDx9WaBMaGlru3LVq1eodjuLNqjq+2NjY1/5s3rlzR6FdbTh/VR3b636nZDIZWrduLbapLedu3rx5aN++PXR1ddGkSRP0798fqampb91Pap95NYHBrRbbvn07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\n"},"metadata":{}}]},{"cell_type":"code","source":["flavors = ('Chocolate', 'Vanilla', 'Macha', 'Others')\n","votes = (50, 20, 30, 10)\n","colors = ('#8B4513', '#FFF8DC', '#93C572', '#E67F0D')\n","explode = (0.1, 0, 0, 0)\n","\n","plt.pie(\n","    x=votes,\n","    labels=flavors,\n","    autopct='%1.1f%%',\n","    colors=colors,\n","    explode=explode\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"id":"3Ww1dH5rFucS","executionInfo":{"status":"ok","timestamp":1734955909516,"user_tz":-420,"elapsed":233,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"7c2d43f6-1f8b-479d-db41-00340d756824"},"execution_count":60,"outputs":[{"output_type":"execute_result","data":{"text/plain":["([<matplotlib.patches.Wedge at 0x7c5ba507fbb0>,\n","  <matplotlib.patches.Wedge at 0x7c5ba507e8c0>,\n","  <matplotlib.patches.Wedge at 0x7c5ba507ce50>,\n","  <matplotlib.patches.Wedge at 0x7c5ba507dc00>],\n"," [Text(0.1707777553786121, 1.1877857375250147, 'Chocolate'),\n","  Text(-1.055442239322695, -0.30990592032662945, 'Vanilla'),\n","  Text(0.15654647964602333, -1.0888035634174043, 'Macha'),\n","  Text(1.0554423263691122, -0.30990562387371495, 'Others')],\n"," [Text(0.09962035730419039, 0.6928750135562585, '45.5%'),\n","  Text(-0.575695766903288, -0.16903959290543424, '18.2%'),\n","  Text(0.08538898889783089, -0.5938928527731295, '27.3%'),\n","  Text(0.5756958143831521, -0.1690394312038445, '9.1%')])"]},"metadata":{},"execution_count":60},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.pie(\n","    x=votes,\n","    labels=flavors,\n","    colors=colors,\n","    wedgeprops = {'width': 0.4},\n","    autopct='%1.1f%%'\n",")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":406},"id":"zXdtoDArGSAk","executionInfo":{"status":"ok","timestamp":1734955909516,"user_tz":-420,"elapsed":207,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"f3b1b081-b90b-4d05-cb31-25e1e4e8cae8"},"execution_count":61,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","\n","x = np.random.normal(15, 5, 250)\n","\n","plt.hist(x=x, bins=15)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"tcnmBd3KG2tB","executionInfo":{"status":"ok","timestamp":1734955909519,"user_tz":-420,"elapsed":207,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"4872533b-3c9c-4f83-f4db-6b05d8e443dd"},"execution_count":62,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.histplot(x=x, bins=15, kde=True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"xQEhZ2wxHExN","executionInfo":{"status":"ok","timestamp":1734955909519,"user_tz":-420,"elapsed":204,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"6cd97b7d-cb8a-42a6-df8d-a1ecfb50db84"},"execution_count":63,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.boxplot(x)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":411},"id":"Oh_mf5kHHdzS","executionInfo":{"status":"ok","timestamp":1734955909520,"user_tz":-420,"elapsed":201,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"a5b85146-3a92-49bb-8719-3605b19cada5"},"execution_count":64,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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8QEAJCU+AICkxAcAkJT4AACSEh8AQFLiAwBISnwAAEmJDwAgqaLjo7e3N2644YZobGyMioqKeOmll0Ztv/POO6OiomLUcv3115dqXgBggis6PgYHB+Piiy+Orq6uL9zn+uuvjwMHDowsv/nNb05pSABg8phe7A+0tbVFW1vbCffJZDJRX19/0kMBAJPXmFzzsXnz5pgzZ06cd955sXLlyvjwww+/cN+hoaHI5/OjFgBg8ip5fFx//fXx7LPPxqZNm+JnP/tZ9PT0RFtbWxw9evS4+3d2dkY2mx1ZmpqaSj0SADCOFP22y79y6623jvz9oosuipaWljjnnHNi8+bNce211/6f/Ts6OmLVqlUjj/P5vAABgEms5PHxeQsWLIizzjordu3addz4yGQykclkxnqMsqn858FyjwDAODfVXivGPD4++OCD+PDDD6OhoWGsn2pcmrWnt9wjAMC4UnR8fPzxx7Fr166Rx3v27Int27dHbW1t1NbWxiOPPBLLly+P+vr62L17dzz44INx7rnnxrJly0o6+ETxz/mLY3jW7HKPAcA4VvnPg1Pql9Wi4+Ptt9+Oq6++euTxses17rjjjuju7o4dO3bEr3/96zh48GA0NjbGddddFz/5yU8m9VsrJzI8a3YMn35WuccAgHGj6PhYsmRJFAqFL9z++uuvn9JAAMDk5rtdAICkxAcAkJT4AACSEh8AQFLiAwBISnwAAEmJDwAgKfEBACQlPgCApMQHAJCU+AAAkhIfAEBS4gMASEp8AABJiQ8AICnxAQAkJT4AgKTEBwCQlPgAAJISHwBAUuIDAEhKfAAASYkPACAp8QEAJCU+AICkxAcAkJT4AACSEh8AQFLiAwBISnwAAEmJDwAgKfEBACQlPgCApMQHAJCU+AAAkhIfAEBS4gMASGp6uQeY7CoP58o9AgDj3FR7rRAfYySbzcaMmZmI/+op9ygATAAzZmYim82We4wkxMcYqauri//8j2cjl5taNQsnsnfv3nj88cfjoYceinnz5pV7HBhXstls1NXVlXuMJMTHGKqrq5sy/yFBMebNmxcLFy4s9xhAmbjgFABISnwAAEmJDwAgKfEBACQlPgCApMQHAJCU+AAAkhIfAEBS4gMASEp8AABJiQ8AICnxAQAkVXR89Pb2xg033BCNjY1RUVERL7300qjthUIhHn744WhoaIhZs2bF0qVL4/333y/VvADABFd0fAwODsbFF18cXV1dx93+xBNPxC9/+cv41a9+FW+99VacfvrpsWzZsjh8+PApDwsATHzTi/2Btra2aGtrO+62QqEQTz31VKxevTpuvPHGiIh49tlno66uLl566aW49dZbT21aAGDCK+k1H3v27In+/v5YunTpyLpsNhuXX355bNmy5bg/MzQ0FPl8ftQCAExeJY2P/v7+iIioq6sbtb6urm5k2+d1dnZGNpsdWZqamko5EgAwzpT9bpeOjo7I5XIjy759+8o9EgAwhkoaH/X19RERMTAwMGr9wMDAyLbPy2QyUVNTM2oBACavksbH/Pnzo76+PjZt2jSyLp/Px1tvvRWtra2lfCoAYIIq+m6Xjz/+OHbt2jXyeM+ePbF9+/aora2N5ubmuP/+++Oxxx6Lr3zlKzF//vz40Y9+FI2NjXHTTTeVcm4AYIIqOj7efvvtuPrqq0cer1q1KiIi7rjjjli/fn08+OCDMTg4GCtWrIiDBw/GVVddFRs3boyqqqrSTQ0ATFhFx8eSJUuiUCh84faKiop49NFH49FHHz2lwQCAyansd7sAAFOL+AAAkhIfAEBS4gMASEp8AABJiQ8AICnxAQAkJT4AgKTEBwCQlPgAAJISHwBAUuIDAEhKfAAASYkPACAp8QEAJCU+AICkxAcAkJT4AACSEh8AQFLiAwBISnwAAEmJDwAgKfEBACQlPgCApMQHAJCU+AAAkhIfAEBS4gMASEp8AABJiQ8AICnxAQAkJT4AgKTEBwCQlPgAAJISHwBAUuIDAEhKfAAASYkPACAp8QEAJCU+AICkxAcAkJT4AACSEh8AQFLiAwBISnwAAEmJDwAgKfEBACQlPgCApMQHAJCU+AAAkhIfAEBS4gMASEp8AABJlTw+fvzjH0dFRcWo5fzzzy/10wAAE9T0sTjohRdeGG+++eb/Psn0MXkaAGACGpMqmD59etTX14/FoQGACW5Mrvl4//33o7GxMRYsWBC333579PX1feG+Q0NDkc/nRy0AwORV8vi4/PLLY/369bFx48bo7u6OPXv2xNe+9rU4dOjQcffv7OyMbDY7sjQ1NZV6JABgHCl5fLS1tcW3v/3taGlpiWXLlsVrr70WBw8ejN/+9rfH3b+joyNyudzIsm/fvlKPBACMI2N+Jejs2bNj4cKFsWvXruNuz2QykclkxnoMAGCcGPPP+fj4449j9+7d0dDQMNZPBQBMACWPjx/84AfR09MTf//73+NPf/pTfOtb34pp06bFbbfdVuqnAgAmoJK/7fLBBx/EbbfdFh9++GGcffbZcdVVV8XWrVvj7LPPLvVTAQATUMnj4/nnny/1IQGAScR3uwAASYkPACAp8QEAJCU+AICkxAcAkJT4AACSEh8AQFLiAwBISnwAAEmJDwAgqZJ/vDqMN4cPH46+vr5yj0FE7N27d9SfjA/Nzc1RVVVV7jGYQsQHk15fX1+sWLGi3GPwGY8//ni5R+Az1q1bFwsXLiz3GEwh4oNJr7m5OdatW1fuMWDcam5uLvcITDHig0mvqqrKb3UA44gLTgGApMQHAJCU+AAAkhIfAEBS4gMASEp8AABJiQ8AICnxAQAkJT4AgKTEBwCQlPgAAJISHwBAUuIDAEhq3H2rbaFQiIiIfD5f5kkAgC/r2Ov2sdfxExl38XHo0KGIiGhqairzJABAsQ4dOhTZbPaE+1QUvkyiJDQ8PBz79++P6urqqKioKPc4QAnl8/loamqKffv2RU1NTbnHAUqoUCjEoUOHorGxMSorT3xVx7iLD2Dyyufzkc1mI5fLiQ+YwlxwCgAkJT4AgKTEB5BMJpOJNWvWRCaTKfcoQBm55gMASMqZDwAgKfEBACQlPgCApMQHAJCU+AAAkhIfAEBS4gMASEp8AABJ/Tcaq1QnVohRBQAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":["lemon_diameter = [6.44, 6.87, 7.7, 8.85, 8.15,\n","                  9.96, 7.21, 10.04, 10.2, 11.06]\n","lemon_weight = [112.05, 114.58, 116.71, 117.4, 128.93,\n","                132.93, 138.92, 145.98, 148.44, 152.81]\n","\n","plt.scatter(x=lemon_diameter, y=lemon_weight)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"ufuo-KbSIDVV","executionInfo":{"status":"ok","timestamp":1734955909521,"user_tz":-420,"elapsed":197,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"4d353f5f-184b-49f5-9bc5-8ffdaf1f450b"},"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7c5ba4f9dea0>"]},"metadata":{},"execution_count":65},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.scatterplot(x=lemon_diameter, y=lemon_weight)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"FLltLR2tIP0c","executionInfo":{"status":"ok","timestamp":1734955918107,"user_tz":-420,"elapsed":8773,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"97692719-df4e-4082-9b58-7c5a21ac97fb"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":66},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.regplot(x=lemon_diameter, y=lemon_weight)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"aX_y5IETIdUo","executionInfo":{"status":"ok","timestamp":1734955918108,"user_tz":-420,"elapsed":95,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"304427db-79fe-43fa-be05-95d4f7b2ad7c"},"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":67},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.plot(lemon_diameter, lemon_weight)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"OS4I-WB0Ix0X","executionInfo":{"status":"ok","timestamp":1734955921302,"user_tz":-420,"elapsed":3276,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"0473b78e-2234-4972-f2da-29601b986dd6"},"execution_count":68,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7c5ba59c3c10>]"]},"metadata":{},"execution_count":68},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["url = 'https://query1.finance.yahoo.com/v7/finance/download/BBCA.JK?period1=1644796800&period2=1676332800&interval=1d&events=history&includeAdjustedClose=true'\n","df = pd.read_csv(url)\n","df['Date'] = pd.to_datetime(df['Date'])\n","\n","plt.figure(figsize=(12, 5))\n","plt.plot(df['Date'], df['Close'], color='red')\n","plt.xlabel('Date', size=15)\n","plt.xlabel('Price', size=15)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":373},"id":"RgeMHso7I-JL","executionInfo":{"status":"error","timestamp":1734955921304,"user_tz":-420,"elapsed":86,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}},"outputId":"e0f24dfa-f18a-4112-a4b3-d25c5708955d"},"execution_count":69,"outputs":[{"output_type":"error","ename":"HTTPError","evalue":"HTTP Error 401: Unauthorized","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mHTTPError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-69-9a1a75faa924>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0murl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'https://query1.finance.yahoo.com/v7/finance/download/BBCA.JK?period1=1644796800&period2=1676332800&interval=1d&events=history&includeAdjustedClose=true'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Date'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Date'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    726\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    727\u001b[0m     \u001b[0;31m# open URLs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 728\u001b[0;31m     ioargs = _get_filepath_or_buffer(\n\u001b[0m\u001b[1;32m    729\u001b[0m         \u001b[0mpath_or_buf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    730\u001b[0m         \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36m_get_filepath_or_buffer\u001b[0;34m(filepath_or_buffer, encoding, compression, mode, storage_options)\u001b[0m\n\u001b[1;32m    382\u001b[0m         \u001b[0;31m# assuming storage_options is to be interpreted as headers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m         \u001b[0mreq_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0murllib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstorage_options\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 384\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0murlopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq_info\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    385\u001b[0m             \u001b[0mcontent_encoding\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheaders\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Content-Encoding\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    386\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mcontent_encoding\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"gzip\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36murlopen\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    287\u001b[0m     \u001b[0;32mimport\u001b[0m \u001b[0murllib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    288\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 289\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0murllib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0murlopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    291\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/urllib/request.py\u001b[0m in \u001b[0;36murlopen\u001b[0;34m(url, data, timeout, cafile, capath, cadefault, context)\u001b[0m\n\u001b[1;32m    214\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m         \u001b[0mopener\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_opener\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mopener\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0minstall_opener\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopener\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    523\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mprocessor\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocess_response\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprotocol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    524\u001b[0m             \u001b[0mmeth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprocessor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m             \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmeth\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    527\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/urllib/request.py\u001b[0m in \u001b[0;36mhttp_response\u001b[0;34m(self, request, response)\u001b[0m\n\u001b[1;32m    632\u001b[0m         \u001b[0;31m# request was successfully received, understood, and accepted.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    633\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m200\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mcode\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m300\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 634\u001b[0;31m             response = self.parent.error(\n\u001b[0m\u001b[1;32m    635\u001b[0m                 'http', request, response, code, msg, hdrs)\n\u001b[1;32m    636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/urllib/request.py\u001b[0m in \u001b[0;36merror\u001b[0;34m(self, proto, *args)\u001b[0m\n\u001b[1;32m    561\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhttp_err\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    562\u001b[0m             \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'default'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'http_error_default'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0morig_args\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 563\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_chain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    564\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    565\u001b[0m \u001b[0;31m# XXX probably also want an abstract factory that knows when it makes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    494\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhandler\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhandlers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    495\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 496\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    497\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    498\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/urllib/request.py\u001b[0m in \u001b[0;36mhttp_error_default\u001b[0;34m(self, req, fp, code, msg, hdrs)\u001b[0m\n\u001b[1;32m    641\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mHTTPDefaultErrorHandler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBaseHandler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    642\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mhttp_error_default\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhdrs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 643\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mHTTPError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfull_url\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhdrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    644\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    645\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mHTTPRedirectHandler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBaseHandler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mHTTPError\u001b[0m: HTTP Error 401: Unauthorized"]}]},{"cell_type":"code","source":["penguins = sns.load_dataset(\"penguins\")\n","\n","sns.barplot(data=penguins, x=\"species\", y=\"body_mass_g\", hue=\"sex\", errorbar=None)\n","plt.show()"],"metadata":{"id":"g3FBwgYCJg8h","executionInfo":{"status":"aborted","timestamp":1734955921305,"user_tz":-420,"elapsed":81,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_boxplot = df[[\"Open\", \"High\", \"Low\", \"Close\", \"Adj Close\"]]\n","\n","sns.boxplot(data=df_boxplot, palette=\"rocket\")\n","plt.ylabel('Price',size=15)\n","plt.show()"],"metadata":{"id":"8KFPr-YRKIAN","executionInfo":{"status":"aborted","timestamp":1734955921306,"user_tz":-420,"elapsed":81,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["penguins = sns.load_dataset(\"penguins\")\n","\n","sns.scatterplot(data=penguins, x=\"body_mass_g\", y=\"flipper_length_mm\", hue=\"species\", style=\"species\")\n","plt.show()"],"metadata":{"id":"cpGroTmeKLRi","executionInfo":{"status":"aborted","timestamp":1734955921311,"user_tz":-420,"elapsed":86,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(12, 5))\n","plt.plot(df['Date'], df['Close'], label='Close', color='red')\n","plt.plot(df['Date'], df['Open'], label='Open', color='blue')\n","plt.title('BBCA Stock Price', size=20)\n","plt.xlabel('Date',size=15)\n","plt.ylabel('Price (IDR)',size=15)\n","plt.legend()\n","plt.show()"],"metadata":{"id":"OUz2D7YfLBn-","executionInfo":{"status":"aborted","timestamp":1734955921312,"user_tz":-420,"elapsed":86,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["penguins_df = sns.load_dataset(\"penguins\")\n","adelie_df = penguins_df[penguins_df.species == \"Adelie\"]\n","chinstrap_df = penguins_df[penguins_df.species == \"Chinstrap\"]\n","gentoo_df = penguins_df[penguins_df.species == \"Gentoo\"]\n","\n","plt.figure(figsize=(10, 5))\n","sns.scatterplot(data=adelie_df, x=\"body_mass_g\", y=\"flipper_length_mm\", facecolor=\"lightgrey\", label=\"Adelie\")\n","sns.scatterplot(data=chinstrap_df, x=\"body_mass_g\", y=\"flipper_length_mm\", facecolor=\"lightgrey\", label=\"Chinstrap\")\n","sns.scatterplot(data=gentoo_df, x=\"body_mass_g\", y=\"flipper_length_mm\", facecolor=\"blue\", label=\"Gentoo\")\n","plt.legend()\n","plt.show()"],"metadata":{"id":"0IAjeHkKLa0b","executionInfo":{"status":"aborted","timestamp":1734955921312,"user_tz":-420,"elapsed":87,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["monthly_orders_df = all_df.resample(rule='M', on=\"order_date\").agg({\n","    \"order_id\": \"nunique\",\n","    \"total_price\": \"sum\"\n","})\n","\n","monthly_orders_df.index = monthly_orders_df.index.strftime('%Y-%m')\n","monthly_orders_df = monthly_orders_df.reset_index()\n","monthly_orders_df.rename(columns={\n","    \"order_id\": \"order_count\",\n","    \"total_price\": \"revenue\"\n","}, inplace=True)\n","\n","montly_orders_df.head()"],"metadata":{"id":"4096F-HcMOXH","executionInfo":{"status":"aborted","timestamp":1734955921313,"user_tz":-420,"elapsed":86,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(10, 5))\n","plt.plot(monthly_orders_df[\"order_date\"], monthly_orders_df[\"order_count\"], marker='o', linewidth=2, color=\"#72BCD4\")\n","plt.title(\"Number of Orders per Month (2021)\", loc=\"center\", fontsize=20)\n","plt.xticks(fontsize=10)\n","plt.yticks(fontsize=10)\n","plt.show()"],"metadata":{"id":"e5h7GCDRNYg-","executionInfo":{"status":"aborted","timestamp":1734955921313,"user_tz":-420,"elapsed":86,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(10, 5))\n","plt.plot(\n","    monthly_orders_df[\"order_date\"],\n","    monthly_orders_df[\"revenue\"],\n","    marker='o',\n","    linewidth=2,\n","    color=\"#72BCD4\"\n",")\n","plt.title(\"Total Revenue per Month (2021)\", loc=\"center\", fontsize=20)\n","plt.xticks(fontsize=10)\n","plt.yticks(fontsize=10)\n","plt.show()"],"metadata":{"id":"G1qyRuF7NnOH","executionInfo":{"status":"aborted","timestamp":1734955921314,"user_tz":-420,"elapsed":86,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sum_order_items_df = all_df.groupby(\"product_name\").quantity_x.sum().sort_values(ascending=False).reset_index()\n","sum_order_items_df.head(15)"],"metadata":{"id":"E9jBii-NNxDC","executionInfo":{"status":"aborted","timestamp":1734955921314,"user_tz":-420,"elapsed":86,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))"],"metadata":{"id":"SWCdTcdsODW5","executionInfo":{"status":"aborted","timestamp":1734955921315,"user_tz":-420,"elapsed":86,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))\n","\n","colors = [\"#72BCD4\", \"#D3D3D3\", \"#D3D3D3\", \"#D3D3D3\", \"#D3D3D3\"]\n","\n","sns.barplot(x=\"quantity_x\", y=\"product_name\", data=sum_order_items_df.head(5), palette=colors, ax=ax[0])\n","ax[0].set_ylabel(None)\n","ax[0].set_xlabel(None)\n","ax[0].set_title(\"Best Performing Product\", loc=\"center\", fontsize=15)\n","ax[0].tick_params(axis ='y', labelsize=12)\n","\n","sns.barplot(x=\"quantity_x\", y=\"product_name\", data=sum_order_items_df.sort_values(by=\"quantity_x\", ascending=True).head(5), palette=colors, ax=ax[1])\n","ax[1].set_ylabel(None)\n","ax[1].set_xlabel(None)\n","ax[1].invert_xaxis()\n","ax[1].yaxis.set_label_position(\"right\")\n","ax[1].yaxis.tick_right()\n","ax[1].set_title(\"Worst Performing Product\", loc=\"center\", fontsize=15)\n","ax[1].tick_params(axis='y', labelsize=12)\n","\n","plt.suptitle(\"Best and Worst Performing Product by Number of Sales\", fontsize=20)\n","plt.show()"],"metadata":{"id":"O_V4kZp2OLgy","executionInfo":{"status":"aborted","timestamp":1734955921315,"user_tz":-420,"elapsed":86,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bygender_df = all_df.groupby(by=\"gender\").customer_id.nunique().reset_index()\n","bygender_df.rename(columns={\n","    \"customer_id\": \"customer_count\"\n","}, inplace=True)\n","\n","plt.figure(figsize=(10, 5))\n","\n","sns.barplot(\n","    y=\"customer_count\",\n","    x=\"gender\",\n","    data=bygender_df.sort_values(by=\"customer_count\", ascending=False),\n","    palette=colors\n",")\n","plt.title(\"Number of Customer by Gender\", loc=\"center\", fontsize=15)\n","plt.ylabel(None)\n","plt.xlabel(None)\n","plt.tick_params(axis='x', labelsize=12)\n","plt.show()"],"metadata":{"id":"VGK_XaNiO1N7","executionInfo":{"status":"aborted","timestamp":1734955921318,"user_tz":-420,"elapsed":88,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["byage_df = all_df.groupby(by=\"age_group\").customer_id.nunique().reset_index()\n","byage_df.rename(columns={\n","    \"customer_id\": \"customer_count\"\n","}, inplace=True)\n","byage_df\n","byage_df['age_group'] = pd.Categorical(byage_df['age_group'], [\"Youth\", \"Adults\", \"Seniors\"])\n","plt.figure(figsize=(10, 5))\n","colors_ = [\"#D3D3D3\", \"#72BCD4\", \"#D3D3D3\", \"#D3D3D3\", \"#D3D3D3\"]\n","\n","sns.barplot(\n","    y=\"customer_count\",\n","    x=\"age_group\",\n","    data=byage_df.sort_values(by=\"age_group\", ascending=False),\n","    palette=colors_\n",")\n","plt.title(\"Number of Customer by Age\", loc=\"center\", fontsize=15)\n","plt.ylabel(None)\n","plt.xlabel(None)\n","plt.tick_params(axis='x', labelsize=12)\n","plt.show()"],"metadata":{"id":"ZQ6P80OfOyAj","executionInfo":{"status":"aborted","timestamp":1734955921318,"user_tz":-420,"elapsed":88,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bystate_df = all_df.groupby(by=\"state\").customer_id.nunique().reset_index()\n","bystate_df.rename(columns={\n","    \"customer_id\": \"customer_count\"\n","}, inplace=True)\n","bystate_df\n","plt.figure(figsize=(10, 5))\n","colors_ = [\"#72BCD4\", \"#D3D3D3\", \"#D3D3D3\", \"#D3D3D3\", \"#D3D3D3\", \"#D3D3D3\", \"#D3D3D3\", \"#D3D3D3\"]\n","sns.barplot(\n","    x=\"customer_count\",\n","    y=\"state\",\n","    data=bystate_df.sort_values(by=\"customer_count\", ascending=False),\n","    palette=colors_\n",")\n","plt.title(\"Number of Customer by States\", loc=\"center\", fontsize=15)\n","plt.ylabel(None)\n","plt.xlabel(None)\n","plt.tick_params(axis='y', labelsize=12)\n","plt.show()"],"metadata":{"id":"CygUfP8RPARh","executionInfo":{"status":"aborted","timestamp":1734955921321,"user_tz":-420,"elapsed":90,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rfm_df = all_df.groupby(by=\"customer_id\", as_index=False).agg({\n","    \"order_date\": \"max\", # mengambil tanggal order terakhir\n","    \"order_id\": \"nunique\", # menghitung jumlah order\n","    \"total_price\": \"sum\" # menghitung jumlah revenue yang dihasilkan\n","})\n","rfm_df.columns = [\"customer_id\", \"max_order_timestamp\", \"frequency\", \"monetary\"]\n","\n","# menghitung kapan terakhir pelanggan melakukan transaksi (hari)\n","rfm_df[\"max_order_timestamp\"] = rfm_df[\"max_order_timestamp\"].dt.date\n","recent_date = orders_df[\"order_date\"].dt.date.max()\n","rfm_df[\"recency\"] = rfm_df[\"max_order_timestamp\"].apply(lambda x: (recent_date - x).days)\n","\n","rfm_df.drop(\"max_order_timestamp\", axis=1, inplace=True)\n","rfm_df.head()"],"metadata":{"id":"FWaGB-D_Pb_S","executionInfo":{"status":"aborted","timestamp":1734955921321,"user_tz":-420,"elapsed":86,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(30, 6))\n","\n","colors = [\"#72BCD4\", \"#72BCD4\", \"#72BCD4\", \"#72BCD4\", \"#72BCD4\"]\n","\n","sns.barplot(y=\"recency\", x=\"customer_id\", data=rfm_df.sort_values(by=\"recency\", ascending=True).head(5), palette=colors, ax=ax[0])\n","ax[0].set_ylabel(None)\n","ax[0].set_xlabel(None)\n","ax[0].set_title(\"By Recency (days)\", loc=\"center\", fontsize=18)\n","ax[0].tick_params(axis ='x', labelsize=15)\n","\n","sns.barplot(y=\"frequency\", x=\"customer_id\", data=rfm_df.sort_values(by=\"frequency\", ascending=False).head(5), palette=colors, ax=ax[1])\n","ax[1].set_ylabel(None)\n","ax[1].set_xlabel(None)\n","ax[1].set_title(\"By Frequency\", loc=\"center\", fontsize=18)\n","ax[1].tick_params(axis='x', labelsize=15)\n","\n","sns.barplot(y=\"monetary\", x=\"customer_id\", data=rfm_df.sort_values(by=\"monetary\", ascending=False).head(5), palette=colors, ax=ax[2])\n","ax[2].set_ylabel(None)\n","ax[2].set_xlabel(None)\n","ax[2].set_title(\"By Monetary\", loc=\"center\", fontsize=18)\n","ax[2].tick_params(axis='x', labelsize=15)\n","\n","plt.suptitle(\"Best Customer Based on RFM Parameters (customer_id)\", fontsize=20)\n","plt.show()"],"metadata":{"id":"6H8q9547PtJC","executionInfo":{"status":"aborted","timestamp":1734955921322,"user_tz":-420,"elapsed":85,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["all_df.to_csv(\"all_data.csv\", index=False)"],"metadata":{"id":"KrxSzWXgbzAK","executionInfo":{"status":"ok","timestamp":1734956012459,"user_tz":-420,"elapsed":455,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"}}},"execution_count":70,"outputs":[]}]}