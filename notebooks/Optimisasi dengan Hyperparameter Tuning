{"cells":[{"cell_type":"markdown","metadata":{"id":"HY_WN0oG_wWG"},"source":["# Klasifikasi Model"]},{"cell_type":"markdown","metadata":{"id":"gh93Awl1197v"},"source":["## Loading dataset dan Pre-processing dataset"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10077,"status":"ok","timestamp":1735667409347,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"},"user_tz":-420},"id":"x-1h8YMU1g_Y","outputId":"dd2eb7ee-2df6-4032-b46f-58d055ccf55c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Shape of training data: (700, 48)\n","Shape of testing data: (300, 48)\n"]}],"source":["from sklearn.datasets import fetch_openml\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Mengunduh dataset German Credit dari OpenML\n","X, y = fetch_openml(name='credit-g', version=1, return_X_y=True, as_frame=True)\n","\n","# Konversi target menjadi numerik\n","le = LabelEncoder()\n","y = le.fit_transform(y)  # Mengubah 'good' menjadi 1 dan 'bad' menjadi 0\n","\n","# Melakukan One-Hot Encoding pada fitur kategorikal\n","X_encoded = pd.get_dummies(X, drop_first=True)  # Konversi fitur kategorikal menjadi numerik\n","\n","# Membagi dataset menjadi training set dan testing set (70% training, 30% testing)\n","X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.3, random_state=42)\n","\n","print(\"Shape of training data:\", X_train.shape)\n","print(\"Shape of testing data:\", X_test.shape)"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":461},"executionInfo":{"elapsed":41,"status":"ok","timestamp":1735667409348,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"},"user_tz":-420},"id":"zUygOfhi5SJ3","outputId":"d5c00ca2-c9d4-4af7-e5b3-1f00a7c5f8b0"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train"},"text/html":["\n","  \u003cdiv id=\"df-64e79306-b9b7-412d-94fc-d1439ea28aab\" class=\"colab-df-container\"\u003e\n","    \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eduration\u003c/th\u003e\n","      \u003cth\u003ecredit_amount\u003c/th\u003e\n","      \u003cth\u003einstallment_commitment\u003c/th\u003e\n","      \u003cth\u003eresidence_since\u003c/th\u003e\n","      \u003cth\u003eage\u003c/th\u003e\n","      \u003cth\u003eexisting_credits\u003c/th\u003e\n","      \u003cth\u003enum_dependents\u003c/th\u003e\n","      \u003cth\u003echecking_status_\u0026lt;0\u003c/th\u003e\n","      \u003cth\u003echecking_status_\u0026gt;=200\u003c/th\u003e\n","      \u003cth\u003echecking_status_no checking\u003c/th\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003cth\u003eproperty_magnitude_car\u003c/th\u003e\n","      \u003cth\u003eother_payment_plans_none\u003c/th\u003e\n","      \u003cth\u003eother_payment_plans_stores\u003c/th\u003e\n","      \u003cth\u003ehousing_own\u003c/th\u003e\n","      \u003cth\u003ehousing_rent\u003c/th\u003e\n","      \u003cth\u003ejob_unemp/unskilled non res\u003c/th\u003e\n","      \u003cth\u003ejob_unskilled resident\u003c/th\u003e\n","      \u003cth\u003ejob_skilled\u003c/th\u003e\n","      \u003cth\u003eown_telephone_yes\u003c/th\u003e\n","      \u003cth\u003eforeign_worker_yes\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e541\u003c/th\u003e\n","      \u003ctd\u003e24\u003c/td\u003e\n","      \u003ctd\u003e2032\u003c/td\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","      \u003ctd\u003e60\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e440\u003c/th\u003e\n","      \u003ctd\u003e12\u003c/td\u003e\n","      \u003ctd\u003e1884\u003c/td\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","      \u003ctd\u003e39\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e482\u003c/th\u003e\n","      \u003ctd\u003e30\u003c/td\u003e\n","      \u003ctd\u003e3622\u003c/td\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","      \u003ctd\u003e57\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e422\u003c/th\u003e\n","      \u003ctd\u003e12\u003c/td\u003e\n","      \u003ctd\u003e958\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e47\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e778\u003c/th\u003e\n","      \u003ctd\u003e36\u003c/td\u003e\n","      \u003ctd\u003e5711\u003c/td\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e38\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e106\u003c/th\u003e\n","      \u003ctd\u003e18\u003c/td\u003e\n","      \u003ctd\u003e6458\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","      \u003ctd\u003e39\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e270\u003c/th\u003e\n","      \u003ctd\u003e18\u003c/td\u003e\n","      \u003ctd\u003e2662\u003c/td\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e32\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e860\u003c/th\u003e\n","      \u003ctd\u003e24\u003c/td\u003e\n","      \u003ctd\u003e5804\u003c/td\u003e\n","      \u003ctd\u003e4\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e27\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e435\u003c/th\u003e\n","      \u003ctd\u003e12\u003c/td\u003e\n","      \u003ctd\u003e1484\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e102\u003c/th\u003e\n","      \u003ctd\u003e6\u003c/td\u003e\n","      \u003ctd\u003e932\u003c/td\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e24\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","      \u003ctd\u003eFalse\u003c/td\u003e\n","      \u003ctd\u003eTrue\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003cp\u003e700 rows × 48 columns\u003c/p\u003e\n","\u003c/div\u003e\n","    \u003cdiv class=\"colab-df-buttons\"\u003e\n","\n","  \u003cdiv class=\"colab-df-container\"\u003e\n","    \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-64e79306-b9b7-412d-94fc-d1439ea28aab')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\"\u003e\n","\n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\"\u003e\n","    \u003cpath d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/\u003e\n","  \u003c/svg\u003e\n","    \u003c/button\u003e\n","\n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","    \u003cscript\u003e\n","      const buttonEl =\n","        document.querySelector('#df-64e79306-b9b7-412d-94fc-d1439ea28aab button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-64e79306-b9b7-412d-94fc-d1439ea28aab');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    \u003c/script\u003e\n","  \u003c/div\u003e\n","\n","\n","\u003cdiv id=\"df-794cf9f1-f401-4b40-b9ac-f5037ff969dc\"\u003e\n","  \u003cbutton class=\"colab-df-quickchart\" onclick=\"quickchart('df-794cf9f1-f401-4b40-b9ac-f5037ff969dc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\"\u003e\n","\n","\u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\"\u003e\n","    \u003cg\u003e\n","        \u003cpath d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/\u003e\n","    \u003c/g\u003e\n","\u003c/svg\u003e\n","  \u003c/button\u003e\n","\n","\u003cstyle\u003e\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","\u003c/style\u003e\n","\n","  \u003cscript\u003e\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() =\u003e {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-794cf9f1-f401-4b40-b9ac-f5037ff969dc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  \u003c/script\u003e\n","\u003c/div\u003e\n","\n","  \u003cdiv id=\"id_58931b2e-df47-4376-972e-d6f428391fa2\"\u003e\n","    \u003cstyle\u003e\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    \u003c/style\u003e\n","    \u003cbutton class=\"colab-df-generate\" onclick=\"generateWithVariable('X_train')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\"\u003e\n","\n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/\u003e\n","  \u003c/svg\u003e\n","    \u003c/button\u003e\n","    \u003cscript\u003e\n","      (() =\u003e {\n","      const buttonEl =\n","        document.querySelector('#id_58931b2e-df47-4376-972e-d6f428391fa2 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () =\u003e {\n","        google.colab.notebook.generateWithVariable('X_train');\n","      }\n","      })();\n","    \u003c/script\u003e\n","  \u003c/div\u003e\n","\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n"],"text/plain":["     duration  credit_amount  installment_commitment  residence_since  age  \\\n","541        24           2032                       4                4   60   \n","440        12           1884                       4                4   39   \n","482        30           3622                       4                4   57   \n","422        12            958                       2                3   47   \n","778        36           5711                       4                2   38   \n","..        ...            ...                     ...              ...  ...   \n","106        18           6458                       2                4   39   \n","270        18           2662                       4                3   32   \n","860        24           5804                       4                2   27   \n","435        12           1484                       2                1   25   \n","102         6            932                       3                2   24   \n","\n","     existing_credits  num_dependents  checking_status_\u003c0  \\\n","541                 2               1               False   \n","440                 1               1               False   \n","482                 2               1                True   \n","422                 2               2               False   \n","778                 2               1               False   \n","..                ...             ...                 ...   \n","106                 2               2               False   \n","270                 1               1               False   \n","860                 2               1               False   \n","435                 1               1               False   \n","102                 1               1               False   \n","\n","     checking_status_\u003e=200  checking_status_no checking  ...  \\\n","541                  False                         True  ...   \n","440                  False                         True  ...   \n","482                  False                        False  ...   \n","422                  False                        False  ...   \n","778                  False                         True  ...   \n","..                     ...                          ...  ...   \n","106                  False                         True  ...   \n","270                  False                         True  ...   \n","860                  False                         True  ...   \n","435                  False                        False  ...   \n","102                  False                         True  ...   \n","\n","     property_magnitude_car  other_payment_plans_none  \\\n","541                   False                      True   \n","440                    True                      True   \n","482                   False                      True   \n","422                   False                      True   \n","778                    True                      True   \n","..                      ...                       ...   \n","106                   False                     False   \n","270                   False                      True   \n","860                   False                      True   \n","435                   False                      True   \n","102                   False                      True   \n","\n","     other_payment_plans_stores  housing_own  housing_rent  \\\n","541                       False        False         False   \n","440                       False         True         False   \n","482                       False        False          True   \n","422                       False         True         False   \n","778                       False         True         False   \n","..                          ...          ...           ...   \n","106                       False         True         False   \n","270                       False         True         False   \n","860                       False         True         False   \n","435                       False         True         False   \n","102                       False         True         False   \n","\n","     job_unemp/unskilled non res  job_unskilled resident  job_skilled  \\\n","541                        False                   False         True   \n","440                        False                   False        False   \n","482                        False                   False         True   \n","422                        False                    True        False   \n","778                        False                   False        False   \n","..                           ...                     ...          ...   \n","106                        False                   False        False   \n","270                        False                   False         True   \n","860                        False                   False         True   \n","435                        False                   False         True   \n","102                        False                   False         True   \n","\n","     own_telephone_yes  foreign_worker_yes  \n","541               True                True  \n","440               True                True  \n","482               True                True  \n","422              False                True  \n","778               True                True  \n","..                 ...                 ...  \n","106               True                True  \n","270              False               False  \n","860              False                True  \n","435               True                True  \n","102              False                True  \n","\n","[700 rows x 48 columns]"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["X_train"]},{"cell_type":"markdown","metadata":{"id":"xC3SUMy04o3V"},"source":["## Membangun foundation model menggunakan random forest"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3023,"status":"ok","timestamp":1735667412338,"user":{"displayName":"Farrel Nikoson","userId":"09456199538392254267"},"user_tz":-420},"id":"DruhzrmT3ZI2","outputId":"ce35a594-d7ff-4695-f4d9-0d54da71468b"},"outputs":[{"name":"stdout","output_type":"stream","text":["Initial accuracy on test set (without tuning): 0.76\n"]}],"source":["from sklearn.ensemble import RandomForestClassifier\n","\n","# Inisialisasi model Random Forest tanpa hyperparameter tuning\n","rf = RandomForestClassifier(random_state=42)\n","rf.fit(X_train, y_train)\n","\n","# Evaluasi awal model tanpa tuning\n","initial_score = rf.score(X_test, y_test)\n","print(f\"Initial accuracy on test set (without tuning): {initial_score:.2f}\")"]},{"cell_type":"markdown","metadata":{"id":"N1NaJkmG5YUB"},"source":["## Grid Search"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"bQJucC_P4uRt"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 3 folds for each of 54 candidates, totalling 162 fits\n","Best parameters (Grid Search): {'criterion': 'gini', 'max_depth': 30, 'min_samples_split': 5, 'n_estimators': 200}\n","Accuracy after Grid Search: 0.76\n"]}],"source":["from sklearn.model_selection import GridSearchCV\n","\n","# Definisikan parameter grid untuk Grid Search\n","param_grid = {\n","    'n_estimators': [100, 200, 300],\n","    'max_depth': [10, 20, 30],\n","    'min_samples_split': [2, 5, 10],\n","    'criterion': ['gini', 'entropy']\n","}\n","\n","# Inisialisasi GridSearchCV\n","grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=3, n_jobs=-1, verbose=2)\n","grid_search.fit(X_train, y_train)\n","\n","# Output hasil terbaik\n","print(f\"Best parameters (Grid Search): {grid_search.best_params_}\")\n","best_rf_grid = grid_search.best_estimator_\n","\n","# Evaluasi performa model pada test set\n","grid_search_score = best_rf_grid.score(X_test, y_test)\n","print(f\"Accuracy after Grid Search: {grid_search_score:.2f}\")"]},{"cell_type":"markdown","metadata":{"id":"04zpz5zS7NTy"},"source":["## Random Search"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"p04kt4Kq5brr"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 3 folds for each of 20 candidates, totalling 60 fits\n","Best parameters (Random Search): {'n_estimators': 200, 'min_samples_split': 5, 'max_depth': 30, 'criterion': 'gini'}\n","Accuracy after Random Search: 0.76\n"]}],"source":["from sklearn.model_selection import RandomizedSearchCV\n","import numpy as np\n","\n","# Definisikan ruang pencarian untuk Random Search\n","param_dist = {\n","    'n_estimators': np.linspace(100, 500, 5, dtype=int),\n","    'max_depth': np.linspace(10, 50, 5, dtype=int),\n","    'min_samples_split': [2, 5, 10],\n","    'criterion': ['gini', 'entropy']\n","}\n","\n","# Inisialisasi RandomizedSearchCV\n","random_search = RandomizedSearchCV(estimator=rf, param_distributions=param_dist, n_iter=20, cv=3, n_jobs=-1, verbose=2, random_state=42)\n","random_search.fit(X_train, y_train)\n","\n","# Output hasil terbaik\n","print(f\"Best parameters (Random Search): {random_search.best_params_}\")\n","best_rf_random = random_search.best_estimator_\n","\n","# Evaluasi performa model pada test set\n","random_search_score = best_rf_random.score(X_test, y_test)\n","print(f\"Accuracy after Random Search: {random_search_score:.2f}\")"]},{"cell_type":"markdown","metadata":{"id":"TeFeMXzm7mQ3"},"source":["## Bayesian Optimization"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"KA83KeYv7u8A"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting scikit-optimize\n","  Downloading scikit_optimize-0.10.2-py2.py3-none-any.whl.metadata (9.7 kB)\n","Requirement already satisfied: joblib\u003e=0.11 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.4.2)\n","Collecting pyaml\u003e=16.9 (from scikit-optimize)\n","  Downloading pyaml-24.12.1-py3-none-any.whl.metadata (12 kB)\n","Requirement already satisfied: numpy\u003e=1.20.3 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.26.4)\n","Requirement already satisfied: scipy\u003e=1.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.13.1)\n","Requirement already satisfied: scikit-learn\u003e=1.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.6.0)\n","Requirement already satisfied: packaging\u003e=21.3 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (24.2)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from pyaml\u003e=16.9-\u003escikit-optimize) (6.0.2)\n","Requirement already satisfied: threadpoolctl\u003e=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn\u003e=1.0.0-\u003escikit-optimize) (3.5.0)\n","Downloading scikit_optimize-0.10.2-py2.py3-none-any.whl (107 kB)\n","\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/107.8 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m107.8/107.8 kB\u001b[0m \u001b[31m9.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pyaml-24.12.1-py3-none-any.whl (25 kB)\n","Installing collected packages: pyaml, scikit-optimize\n","Successfully installed pyaml-24.12.1 scikit-optimize-0.10.2\n"]}],"source":["!pip install scikit-optimize"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"wVMLyh7s7QdX"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","Best parameters (Bayesian Optimization): OrderedDict([('criterion', 'entropy'), ('max_depth', 50), ('min_samples_split', 3), ('n_estimators', 394)])\n","Accuracy after Bayesian Optimization: 0.77\n"]}],"source":["from skopt import BayesSearchCV\n","\n","# Definisikan ruang pencarian untuk Bayesian Optimization\n","param_space = {\n","    'n_estimators': (100, 500),\n","    'max_depth': (10, 50),\n","    'min_samples_split': (2, 10),\n","    'criterion': ['gini', 'entropy']\n","}\n","\n","# Inisialisasi BayesSearchCV\n","bayes_search = BayesSearchCV(estimator=rf, search_spaces=param_space, n_iter=32, cv=3, n_jobs=-1, verbose=2, random_state=42)\n","bayes_search.fit(X_train, y_train)\n","\n","# Output hasil terbaik\n","print(f\"Best parameters (Bayesian Optimization): {bayes_search.best_params_}\")\n","best_rf_bayes = bayes_search.best_estimator_\n","\n","# Evaluasi performa model pada test set\n","bayes_search_score = best_rf_bayes.score(X_test, y_test)\n","print(f\"Accuracy after Bayesian Optimization: {bayes_search_score:.2f}\")"]},{"cell_type":"markdown","metadata":{"id":"qmDWegBU9Hcp"},"source":["## Optimasi Random Search"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"yWmtYyEP7p-Q"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 5 folds for each of 50 candidates, totalling 250 fits\n","Best parameters (Random Search): {'n_estimators': 300, 'min_samples_split': 8, 'min_samples_leaf': 1, 'max_depth': None, 'criterion': 'entropy', 'bootstrap': True}\n","Accuracy after Random Search: 0.76\n"]}],"source":["from sklearn.model_selection import RandomizedSearchCV\n","from sklearn.ensemble import RandomForestClassifier\n","import numpy as np\n","\n","# Inisialisasi model Random Forest\n","rf = RandomForestClassifier(random_state=42)\n","\n","# Memperluas ruang pencarian hyperparameter\n","param_dist = {\n","    'n_estimators': np.arange(100, 1000, 100),  # dari 100 hingga 1000 dengan langkah 100\n","    'max_depth': [None] + list(np.arange(10, 50, 10)),  # termasuk None untuk tanpa batas\n","    'min_samples_split': np.arange(2, 11, 2),  # dari 2 hingga 10 dengan langkah 2\n","    'min_samples_leaf': np.arange(1, 5),  # daun minimal\n","    'bootstrap': [True, False],  # mencoba model dengan atau tanpa bootstrap\n","    'criterion': ['gini', 'entropy']  # menggunakan dua jenis criteria\n","}\n","\n","# Inisialisasi RandomizedSearchCV\n","random_search = RandomizedSearchCV(\n","    estimator=rf,\n","    param_distributions=param_dist,\n","    n_iter=50,  # meningkatkan jumlah iterasi\n","    cv=5,  # meningkatkan cross-validation ke 5 fold untuk hasil lebih konsisten\n","    n_jobs=-1,\n","    verbose=2,\n","    random_state=42\n",")\n","\n","# Melakukan tuning\n","random_search.fit(X_train, y_train)\n","\n","# Output hasil terbaik\n","print(f\"Best parameters (Random Search): {random_search.best_params_}\")\n","best_rf_random = random_search.best_estimator_\n","\n","# Evaluasi performa model pada test set\n","random_search_score = best_rf_random.score(X_test, y_test)\n","print(f\"Accuracy after Random Search: {random_search_score:.2f}\")"]},{"cell_type":"markdown","metadata":{"id":"FFzvWnPv9JuP"},"source":["## Optimasi Bayesian Optimization"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BouGHgVY9JLj"},"outputs":[],"source":["from skopt import BayesSearchCV\n","\n","# Memperbaiki ruang pencarian untuk Bayesian Optimization\n","param_space = {\n","    'n_estimators': (100, 1000),\n","    'max_depth': (10, 50),\n","    'min_samples_split': (2, 10),\n","    'min_samples_leaf': (1, 4),\n","    'bootstrap': [True, False],\n","    'criterion': ['gini', 'entropy']\n","}\n","\n","# Inisialisasi BayesSearchCV dengan lebih banyak iterasi\n","bayes_search = BayesSearchCV(\n","    estimator=rf,\n","    search_spaces=param_space,\n","    n_iter=50,  # meningkatkan jumlah iterasi untuk pencarian lebih mendalam\n","    cv=5,  # 5-fold cross-validation untuk evaluasi lebih stabil\n","    n_jobs=-1,\n","    verbose=2,\n","    random_state=42\n",")\n","\n","# Melakukan tuning dengan Bayesian Optimization\n","bayes_search.fit(X_train, y_train)\n","\n","# Output hasil terbaik\n","print(f\"Best parameters (Bayesian Optimization): {bayes_search.best_params_}\")\n","best_rf_bayes = bayes_search.best_estimator_\n","\n","# Evaluasi performa model pada test set\n","bayes_search_score = best_rf_bayes.score(X_test, y_test)\n","print(f\"Accuracy after Bayesian Optimization: {bayes_search_score:.2f}\")"]},{"cell_type":"markdown","metadata":{"id":"WKAxkR38B4rw"},"source":["# Klasifikasi Titanic"]},{"cell_type":"markdown","metadata":{"id":"V5fbTAI6EDaX"},"source":["## Load data dan pre-processing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FB2t1EhKEGLx"},"outputs":[],"source":["import seaborn as sns\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Mengunduh dataset Titanic dari Seaborn\n","titanic = sns.load_dataset('titanic')\n","\n","# Menghilangkan baris dengan nilai yang hilang\n","titanic.dropna(subset=['embarked', 'age', 'fare'], inplace=True)\n","\n","# Memilih fitur yang relevan\n","X = titanic[['pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'embarked']]\n","y = titanic['survived']\n","\n","# Mengubah fitur kategorikal menjadi numerik menggunakan One-Hot Encoding\n","X_encoded = pd.get_dummies(X, drop_first=True)\n","\n","# Membagi dataset menjadi training set dan testing set (70% training, 30% testing)\n","X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.3, random_state=42)\n","\n","print(\"Shape of training data:\", X_train.shape)\n","print(\"Shape of testing data:\", X_test.shape)"]},{"cell_type":"markdown","metadata":{"id":"sp0mqIMYEKJR"},"source":["## Foundation Model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QlusKG2FELfb"},"outputs":[],"source":["from sklearn.ensemble import RandomForestClassifier\n","\n","# Inisialisasi model Random Forest\n","rf = RandomForestClassifier(random_state=42)\n","rf.fit(X_train, y_train)\n","\n","# Evaluasi awal model tanpa tuning\n","initial_score = rf.score(X_test, y_test)\n","print(f\"Initial accuracy on test set (without tuning): {initial_score:.2f}\")"]},{"cell_type":"markdown","metadata":{"id":"Hc-Ei9EPEP76"},"source":["## Grid Search"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A8SA0FFvERDQ"},"outputs":[],"source":["from sklearn.model_selection import GridSearchCV\n","\n","# Definisikan parameter grid untuk Grid Search\n","param_grid = {\n","    'n_estimators': [100, 200, 300],\n","    'max_depth': [10, 20, 30],\n","    'min_samples_split': [2, 5, 10],\n","    'criterion': ['gini', 'entropy']\n","}\n","\n","# Inisialisasi GridSearchCV\n","grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=3, n_jobs=-1, verbose=2)\n","grid_search.fit(X_train, y_train)\n","\n","# Output hasil terbaik\n","print(f\"Best parameters (Grid Search): {grid_search.best_params_}\")\n","best_rf_grid = grid_search.best_estimator_\n","\n","# Evaluasi performa model pada test set\n","grid_search_score = best_rf_grid.score(X_test, y_test)\n","print(f\"Accuracy after Grid Search: {grid_search_score:.2f}\")"]},{"cell_type":"markdown","metadata":{"id":"xBchpo4OEOCb"},"source":["## Random Search"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5XMcqyKaEV5M"},"outputs":[],"source":["from sklearn.model_selection import RandomizedSearchCV\n","import numpy as np\n","\n","# Definisikan ruang pencarian untuk Random Search\n","param_dist = {\n","    'n_estimators': np.arange(100, 500, 100),\n","    'max_depth': [None] + list(np.arange(10, 50, 10)),\n","    'min_samples_split': np.arange(2, 11, 2),\n","    'criterion': ['gini', 'entropy']\n","}\n","\n","# Inisialisasi RandomizedSearchCV\n","random_search = RandomizedSearchCV(estimator=rf, param_distributions=param_dist, n_iter=20, cv=3, n_jobs=-1, verbose=2, random_state=42)\n","random_search.fit(X_train, y_train)\n","\n","# Output hasil terbaik\n","print(f\"Best parameters (Random Search): {random_search.best_params_}\")\n","best_rf_random = random_search.best_estimator_\n","\n","# Evaluasi performa model pada test set\n","random_search_score = best_rf_random.score(X_test, y_test)\n","print(f\"Accuracy after Random Search: {random_search_score:.2f}\")"]},{"cell_type":"markdown","metadata":{"id":"W4h8IaWgET34"},"source":["## Bayesian Optimization"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7O0jGPdXEX_i"},"outputs":[],"source":["from skopt import BayesSearchCV\n","\n","# Definisikan ruang pencarian untuk Bayesian Optimization\n","param_space = {\n","    'n_estimators': (100, 500),\n","    'max_depth': (10, 50),\n","    'min_samples_split': (2, 10),\n","    'min_samples_leaf': (1, 4),\n","    'bootstrap': [True, False],\n","    'criterion': ['gini', 'entropy']\n","}\n","\n","# Inisialisasi BayesSearchCV\n","bayes_search = BayesSearchCV(estimator=rf, search_spaces=param_space, n_iter=32, cv=3, n_jobs=-1, verbose=2, random_state=42)\n","bayes_search.fit(X_train, y_train)\n","\n","# Output hasil terbaik\n","print(f\"Best parameters (Bayesian Optimization): {bayes_search.best_params_}\")\n","best_rf_bayes = bayes_search.best_estimator_\n","\n","# Evaluasi performa model pada test set\n","bayes_search_score = best_rf_bayes.score(X_test, y_test)\n","print(f\"Accuracy after Bayesian Optimization: {bayes_search_score:.2f}\")"]},{"cell_type":"markdown","metadata":{"id":"FiaSeHyF_zQD"},"source":["# Regresi MOdel"]},{"cell_type":"markdown","metadata":{"id":"R5Tp5EJ3A1ZS"},"source":["## Load data dan pre-processing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"s50o4zcv9NMu"},"outputs":[],"source":["from sklearn.datasets import fetch_california_housing\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","\n","# Mengunduh dataset California Housing\n","X, y = fetch_california_housing(return_X_y=True)\n","\n","# Membagi dataset menjadi training set dan testing set (70% training, 30% testing)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# Melakukan scaling pada data (penting untuk regresi)\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)\n","\n","print(\"Shape of training data:\", X_train.shape)\n","print(\"Shape of testing data:\", X_test.shape)"]},{"cell_type":"markdown","metadata":{"id":"UmqJntWZA5Vy"},"source":["## Foundation Model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iOXJjNTKA3MR"},"outputs":[],"source":["from sklearn.ensemble import RandomForestRegressor\n","from sklearn.metrics import mean_squared_error\n","import time\n","# Mengukur waktu eksekusi fungsi\n","start_time = time.time()  # Mencatat waktu mulai\n","# Inisialisasi model Random Forest Regressor\n","rf = RandomForestRegressor(random_state=42)\n","rf.fit(X_train, y_train)\n","\n","# Evaluasi awal model tanpa tuning\n","y_pred = rf.predict(X_test)\n","initial_mse = mean_squared_error(y_test, y_pred)\n","print(f\"Initial MSE on test set (without tuning): {initial_mse:.2f}\")\n","\n","end_time = time.time()  # Mencatat waktu selesai\n","execution_time = end_time - start_time  # Menghitung selisih waktu\n","print(f\"Waktu eksekusi: {execution_time:.4f} detik\")"]},{"cell_type":"markdown","metadata":{"id":"aq9FHR8kA86P"},"source":["## Grid Search"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rnd2elVAA6tz"},"outputs":[],"source":["from sklearn.model_selection import GridSearchCV\n","\n","start_time = time.time()  # Mencatat waktu mulai\n","\n","# Definisikan parameter grid untuk Grid Search\n","param_grid = {\n","    'n_estimators': [100, 200, 300, 400],\n","    'max_depth': [10, 20, 30, 40],\n","    'min_samples_split': [2, 5, 10, 15],\n","    'min_samples_leaf': [1, 2, 4, 8],\n","    'bootstrap': [True, False]\n","}\n","\n","\n","# Inisialisasi GridSearchCV\n","grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=3, n_jobs=-1, verbose=2)\n","grid_search.fit(X_train, y_train)\n","\n","# Output hasil terbaik\n","print(f\"Best parameters (Grid Search): {grid_search.best_params_}\")\n","best_rf_grid = grid_search.best_estimator_\n","\n","# Evaluasi performa model setelah Grid Search\n","y_pred_grid = best_rf_grid.predict(X_test)\n","grid_search_mse = mean_squared_error(y_test, y_pred_grid)\n","print(f\"MSE after Grid Search: {grid_search_mse:.2f}\")\n","end_time = time.time()  # Mencatat waktu selesai\n","execution_time = end_time - start_time  # Menghitung selisih waktu\n","print(f\"Waktu eksekusi: {execution_time:.4f} detik\")"]},{"cell_type":"markdown","metadata":{"id":"OkzPddP_A-hh"},"source":["## Random Search"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BoeWgCYfA-N7"},"outputs":[],"source":["from sklearn.model_selection import RandomizedSearchCV\n","import numpy as np\n","\n","start_time = time.time()  # Mencatat waktu mulai\n","# Definisikan ruang pencarian untuk Random Search\n","param_dist = {\n","    'n_estimators': np.arange(100, 500, 100),\n","    'max_depth': [None] + list(np.arange(10, 50, 10)),\n","    'min_samples_split': np.arange(2, 11, 2),\n","    'min_samples_leaf': np.arange(1, 5),\n","    'bootstrap': [True, False]\n","}\n","\n","# Inisialisasi RandomizedSearchCV\n","random_search = RandomizedSearchCV(estimator=rf, param_distributions=param_dist, n_iter=5, cv=3, n_jobs=-1, verbose=2, random_state=42)\n","random_search.fit(X_train, y_train)\n","\n","# Output hasil terbaik\n","print(f\"Best parameters (Random Search): {random_search.best_params_}\")\n","best_rf_random = random_search.best_estimator_\n","\n","# Evaluasi performa model setelah Random Search\n","y_pred_random = best_rf_random.predict(X_test)\n","random_search_mse = mean_squared_error(y_test, y_pred_random)\n","print(f\"MSE after Grid Search: {random_search_mse:.2f}\")\n","end_time = time.time()  # Mencatat waktu selesai\n","execution_time = end_time - start_time  # Menghitung selisih waktu\n","print(f\"Waktu eksekusi: {execution_time:.4f} detik\")"]},{"cell_type":"markdown","metadata":{"id":"FAoxOrIVD29b"},"source":["## Bayesian Optimization"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Tj6L9Q5BChPS"},"outputs":[],"source":["from skopt import BayesSearchCV\n","\n","start_time = time.time()  # Mencatat waktu mulai\n","\n","# Definisikan ruang pencarian untuk Bayesian Optimization\n","param_space = {\n","    'n_estimators': (100, 500),\n","    'max_depth': (10, 50),\n","    'min_samples_split': (2, 10),\n","    'min_samples_leaf': (1, 4),\n","    'bootstrap': [True, False]\n","}\n","\n","# Inisialisasi BayesSearchCV\n","bayes_search = BayesSearchCV(estimator=rf, search_spaces=param_space, n_iter=32, cv=3, n_jobs=-1, verbose=2, random_state=42)\n","bayes_search.fit(X_train, y_train)\n","\n","# Output hasil terbaik\n","print(f\"Best parameters (Bayesian Optimization): {bayes_search.best_params_}\")\n","best_rf_bayes = bayes_search.best_estimator_\n","\n","# Evaluasi performa model setelah Random Search\n","y_pred_bayes = best_rf_bayes.predict(X_test)\n","bayes_mse = mean_squared_error(y_test, y_pred_bayes)\n","print(f\"MSE after Grid Search: {bayes_mse:.2f}\")\n","end_time = time.time()  # Mencatat waktu selesai\n","execution_time = end_time - start_time  # Menghitung selisih waktu\n","print(f\"Waktu eksekusi: {execution_time:.4f} detik\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nlV5rVukGjPx"},"outputs":[],"source":[]}],"metadata":{"colab":{"collapsed_sections":["HY_WN0oG_wWG","WKAxkR38B4rw"],"name":"","provenance":[{"file_id":"1hrCAkMlxqmHCJaZob7s4SM-PWx--kQni","timestamp":1735667355497}],"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}